//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 2 files.
  struct file {
    /// Resource file `.swiftlint.yml`.
    static let swiftlintYml = Rswift.FileResource(bundle: R.hostingBundle, name: ".swiftlint", pathExtension: "yml")
    /// Resource file `TZImagePickerController.bundle`.
    static let tZImagePickerControllerBundle = Rswift.FileResource(bundle: R.hostingBundle, name: "TZImagePickerController", pathExtension: "bundle")
    
    /// `bundle.url(forResource: ".swiftlint", withExtension: "yml")`
    static func swiftlintYml(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.swiftlintYml
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "TZImagePickerController", withExtension: "bundle")`
    static func tZImagePickerControllerBundle(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.tZImagePickerControllerBundle
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 214 images.
  struct image {
    /// Image `BankCardBg`.
    static let bankCardBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCardBg")
    /// Image `BankCardLogo`.
    static let bankCardLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "BankCardLogo")
    /// Image `BgBoxDown`.
    static let bgBoxDown = Rswift.ImageResource(bundle: R.hostingBundle, name: "BgBoxDown")
    /// Image `BtnPublishIconPart0101`.
    static let btnPublishIconPart0101 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0101")
    /// Image `BtnPublishIconPart0102`.
    static let btnPublishIconPart0102 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0102")
    /// Image `BtnPublishIconPart0201`.
    static let btnPublishIconPart0201 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0201")
    /// Image `BtnPublishIconPart0202`.
    static let btnPublishIconPart0202 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0202")
    /// Image `BtnPublishIconPart0301`.
    static let btnPublishIconPart0301 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0301")
    /// Image `BtnPublishIconPart0302`.
    static let btnPublishIconPart0302 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0302")
    /// Image `BtnPublishIconPart0303`.
    static let btnPublishIconPart0303 = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishIconPart0303")
    /// Image `BtnPublishOff`.
    static let btnPublishOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishOff")
    /// Image `BtnPublishOn`.
    static let btnPublishOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "BtnPublishOn")
    /// Image `CampaignTagStop`.
    static let campaignTagStop = Rswift.ImageResource(bundle: R.hostingBundle, name: "CampaignTagStop")
    /// Image `CellItemCheckmarkOff`.
    static let cellItemCheckmarkOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemCheckmarkOff")
    /// Image `CellItemCheckmarkOn`.
    static let cellItemCheckmarkOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemCheckmarkOn")
    /// Image `CellItemCheckmark`.
    static let cellItemCheckmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemCheckmark")
    /// Image `CellItemDelete`.
    static let cellItemDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemDelete")
    /// Image `CellItemDisclosure`.
    static let cellItemDisclosure = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemDisclosure")
    /// Image `CellItemOperation`.
    static let cellItemOperation = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemOperation")
    /// Image `CellItemWrong`.
    static let cellItemWrong = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellItemWrong")
    /// Image `CellSidebarIconBack`.
    static let cellSidebarIconBack = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconBack")
    /// Image `CellSidebarIconClose`.
    static let cellSidebarIconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconClose")
    /// Image `CellSidebarIconDelay`.
    static let cellSidebarIconDelay = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconDelay")
    /// Image `CellSidebarIconDelivery`.
    static let cellSidebarIconDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconDelivery")
    /// Image `CellSidebarIconMoney`.
    static let cellSidebarIconMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconMoney")
    /// Image `CellSidebarIconOffShelf`.
    static let cellSidebarIconOffShelf = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconOffShelf")
    /// Image `CellSidebarIconOnShelf`.
    static let cellSidebarIconOnShelf = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconOnShelf")
    /// Image `CellSidebarIconPreview`.
    static let cellSidebarIconPreview = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconPreview")
    /// Image `CellSidebarIconRight`.
    static let cellSidebarIconRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconRight")
    /// Image `CellSidebarIconShare`.
    static let cellSidebarIconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconShare")
    /// Image `CellSidebarIconUnknown`.
    static let cellSidebarIconUnknown = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconUnknown")
    /// Image `CellSidebarIconWrong`.
    static let cellSidebarIconWrong = Rswift.ImageResource(bundle: R.hostingBundle, name: "CellSidebarIconWrong")
    /// Image `CenterIconEmblem`.
    static let centerIconEmblem = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterIconEmblem")
    /// Image `CenterIconMoney`.
    static let centerIconMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterIconMoney")
    /// Image `CenterOrderStatusComplete`.
    static let centerOrderStatusComplete = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterOrderStatusComplete")
    /// Image `CenterOrderStatusDelivery`.
    static let centerOrderStatusDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterOrderStatusDelivery")
    /// Image `CenterOrderStatusUnpaid`.
    static let centerOrderStatusUnpaid = Rswift.ImageResource(bundle: R.hostingBundle, name: "CenterOrderStatusUnpaid")
    /// Image `CommonBackButton`.
    static let commonBackButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonBackButton")
    /// Image `CommonBaseBackButton`.
    static let commonBaseBackButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonBaseBackButton")
    /// Image `CommonBgLightGray`.
    static let commonBgLightGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonBgLightGray")
    /// Image `CommonBlueBg`.
    static let commonBlueBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonBlueBg")
    /// Image `CommonButtonAdd`.
    static let commonButtonAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonButtonAdd")
    /// Image `CommonDeleteBadgeButton`.
    static let commonDeleteBadgeButton = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonDeleteBadgeButton")
    /// Image `CommonGrayBg`.
    static let commonGrayBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonGrayBg")
    /// Image `CommonIconAddImage`.
    static let commonIconAddImage = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonIconAddImage")
    /// Image `CommonIconBarcode`.
    static let commonIconBarcode = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonIconBarcode")
    /// Image `CommonTopGrayLineButtonBg`.
    static let commonTopGrayLineButtonBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonTopGrayLineButtonBg")
    /// Image `CommonTransparentBlackBg`.
    static let commonTransparentBlackBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CommonTransparentBlackBg")
    /// Image `CoverAddBg`.
    static let coverAddBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "CoverAddBg")
    /// Image `CoverButtonSelected`.
    static let coverButtonSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "CoverButtonSelected")
    /// Image `HeaderRightWhiteArrow`.
    static let headerRightWhiteArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeaderRightWhiteArrow")
    /// Image `HeaderRightarrow`.
    static let headerRightarrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "HeaderRightarrow")
    /// Image `IconAdd`.
    static let iconAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "IconAdd")
    /// Image `ImageDefaultPlaceholderW140H132`.
    static let imageDefaultPlaceholderW140H132 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW140H132")
    /// Image `ImageDefaultPlaceholderW375H130`.
    static let imageDefaultPlaceholderW375H130 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW375H130")
    /// Image `ImageDefaultPlaceholderW376H139`.
    static let imageDefaultPlaceholderW376H139 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW376H139")
    /// Image `ImageDefaultPlaceholderW378H139`.
    static let imageDefaultPlaceholderW378H139 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW378H139")
    /// Image `ImageDefaultPlaceholderW55H50`.
    static let imageDefaultPlaceholderW55H50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW55H50")
    /// Image `ImageDefaultPlaceholderW78H78`.
    static let imageDefaultPlaceholderW78H78 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW78H78")
    /// Image `ImageDefaultPlaceholderW92H78`.
    static let imageDefaultPlaceholderW92H78 = Rswift.ImageResource(bundle: R.hostingBundle, name: "ImageDefaultPlaceholderW92H78")
    /// Image `LicenseVerifyStatusAudit`.
    static let licenseVerifyStatusAudit = Rswift.ImageResource(bundle: R.hostingBundle, name: "LicenseVerifyStatusAudit")
    /// Image `LicenseVerifyStatusFailed`.
    static let licenseVerifyStatusFailed = Rswift.ImageResource(bundle: R.hostingBundle, name: "LicenseVerifyStatusFailed")
    /// Image `LicenseVerifyStatusSuccess`.
    static let licenseVerifyStatusSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "LicenseVerifyStatusSuccess")
    /// Image `MerchantCenterIconAlert`.
    static let merchantCenterIconAlert = Rswift.ImageResource(bundle: R.hostingBundle, name: "MerchantCenterIconAlert")
    /// Image `MerchantCenterStatusFailed`.
    static let merchantCenterStatusFailed = Rswift.ImageResource(bundle: R.hostingBundle, name: "MerchantCenterStatusFailed")
    /// Image `MerchantCenterVerificationExample`.
    static let merchantCenterVerificationExample = Rswift.ImageResource(bundle: R.hostingBundle, name: "MerchantCenterVerificationExample")
    /// Image `MerchantCenterVerificationSuccess`.
    static let merchantCenterVerificationSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "MerchantCenterVerificationSuccess")
    /// Image `MyOrderTableIconObligation`.
    static let myOrderTableIconObligation = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconObligation")
    /// Image `MyOrderTableIconOver`.
    static let myOrderTableIconOver = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconOver")
    /// Image `MyOrderTableIconRefund`.
    static let myOrderTableIconRefund = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconRefund")
    /// Image `MyOrderTableIconShipped`.
    static let myOrderTableIconShipped = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconShipped")
    /// Image `MyOrderTableIconSuccess`.
    static let myOrderTableIconSuccess = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconSuccess")
    /// Image `MyOrderTableIconToBeShipped`.
    static let myOrderTableIconToBeShipped = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyOrderTableIconToBeShipped")
    /// Image `MyShopCategoryButtonDelete`.
    static let myShopCategoryButtonDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopCategoryButtonDelete")
    /// Image `MyShopCategoryButtonEdit`.
    static let myShopCategoryButtonEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopCategoryButtonEdit")
    /// Image `MyShopCategoryButtonStickOff`.
    static let myShopCategoryButtonStickOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopCategoryButtonStickOff")
    /// Image `MyShopCategoryButtonStickOn`.
    static let myShopCategoryButtonStickOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopCategoryButtonStickOn")
    /// Image `MyShopCategoryIconEditor`.
    static let myShopCategoryIconEditor = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopCategoryIconEditor")
    /// Image `MyShopIconAddress`.
    static let myShopIconAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopIconAddress")
    /// Image `MyShopIconCategory`.
    static let myShopIconCategory = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopIconCategory")
    /// Image `MyShopIconSettings`.
    static let myShopIconSettings = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopIconSettings")
    /// Image `MyShopProductIconManage`.
    static let myShopProductIconManage = Rswift.ImageResource(bundle: R.hostingBundle, name: "MyShopProductIconManage")
    /// Image `NavIconMore`.
    static let navIconMore = Rswift.ImageResource(bundle: R.hostingBundle, name: "NavIconMore")
    /// Image `NaviIconEdit`.
    static let naviIconEdit = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaviIconEdit")
    /// Image `NaviIconFilter`.
    static let naviIconFilter = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaviIconFilter")
    /// Image `NaviIconQRCode`.
    static let naviIconQRCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "NaviIconQRCode")
    /// Image `OrderIconAddress`.
    static let orderIconAddress = Rswift.ImageResource(bundle: R.hostingBundle, name: "OrderIconAddress")
    /// Image `OrderIconUserGray`.
    static let orderIconUserGray = Rswift.ImageResource(bundle: R.hostingBundle, name: "OrderIconUserGray")
    /// Image `OrderIconUser`.
    static let orderIconUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "OrderIconUser")
    /// Image `PaymentIconAlipay`.
    static let paymentIconAlipay = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentIconAlipay")
    /// Image `PaymentIconWallet`.
    static let paymentIconWallet = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentIconWallet")
    /// Image `PaymentIconWechat`.
    static let paymentIconWechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "PaymentIconWechat")
    /// Image `PlaceHolderAvater`.
    static let placeHolderAvater = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderAvater")
    /// Image `PlaceHolderBankAccount`.
    static let placeHolderBankAccount = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderBankAccount")
    /// Image `PlaceHolderExploreIconDefault`.
    static let placeHolderExploreIconDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderExploreIconDefault")
    /// Image `PlaceHolderHeadportrait`.
    static let placeHolderHeadportrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderHeadportrait")
    /// Image `PlaceHolderMianyangBankLogo`.
    static let placeHolderMianyangBankLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderMianyangBankLogo")
    /// Image `PlaceHolderUserPortrait`.
    static let placeHolderUserPortrait = Rswift.ImageResource(bundle: R.hostingBundle, name: "PlaceHolderUserPortrait")
    /// Image `PopoverIconClose`.
    static let popoverIconClose = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconClose")
    /// Image `PopoverIconDelay`.
    static let popoverIconDelay = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconDelay")
    /// Image `PopoverIconDelete`.
    static let popoverIconDelete = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconDelete")
    /// Image `PopoverIconDelivery`.
    static let popoverIconDelivery = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconDelivery")
    /// Image `PopoverIconLogistics`.
    static let popoverIconLogistics = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconLogistics")
    /// Image `PopoverIconMoney`.
    static let popoverIconMoney = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconMoney")
    /// Image `PopoverIconOK`.
    static let popoverIconOK = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconOK")
    /// Image `PopoverIconPreview`.
    static let popoverIconPreview = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconPreview")
    /// Image `PopoverIconRefuse`.
    static let popoverIconRefuse = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconRefuse")
    /// Image `PopoverIconRight`.
    static let popoverIconRight = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconRight")
    /// Image `PopoverIconShare-1`.
    static let popoverIconShare1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconShare-1")
    /// Image `PopoverIconShare`.
    static let popoverIconShare = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconShare")
    /// Image `PopoverIconUP`.
    static let popoverIconUP = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconUP")
    /// Image `PopoverIconWrong`.
    static let popoverIconWrong = Rswift.ImageResource(bundle: R.hostingBundle, name: "PopoverIconWrong")
    /// Image `PublishTextLblBg`.
    static let publishTextLblBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "PublishTextLblBg")
    /// Image `QRCodeBorder`.
    static let qRCodeBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRCodeBorder")
    /// Image `QRCodeInputBorder`.
    static let qRCodeInputBorder = Rswift.ImageResource(bundle: R.hostingBundle, name: "QRCodeInputBorder")
    /// Image `SettingsIconAbout`.
    static let settingsIconAbout = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIconAbout")
    /// Image `SettingsIconFeedback`.
    static let settingsIconFeedback = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIconFeedback")
    /// Image `SettingsIconHelp`.
    static let settingsIconHelp = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIconHelp")
    /// Image `SettingsIconSecurity`.
    static let settingsIconSecurity = Rswift.ImageResource(bundle: R.hostingBundle, name: "SettingsIconSecurity")
    /// Image `ShareBtnQQ`.
    static let shareBtnQQ = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareBtnQQ")
    /// Image `ShareBtnTimeline`.
    static let shareBtnTimeline = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareBtnTimeline")
    /// Image `ShareBtnWechat`.
    static let shareBtnWechat = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareBtnWechat")
    /// Image `ShareLink`.
    static let shareLink = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShareLink")
    /// Image `ShopAddressNoData`.
    static let shopAddressNoData = Rswift.ImageResource(bundle: R.hostingBundle, name: "ShopAddressNoData")
    /// Image `SigninBgCenterIcon`.
    static let signinBgCenterIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninBgCenterIcon")
    /// Image `SigninBg`.
    static let signinBg = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninBg")
    /// Image `SigninBtnEyeOff`.
    static let signinBtnEyeOff = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninBtnEyeOff")
    /// Image `SigninBtnEyeOn`.
    static let signinBtnEyeOn = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninBtnEyeOn")
    /// Image `SigninIconPasswordLock`.
    static let signinIconPasswordLock = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconPasswordLock")
    /// Image `SigninIconPassword`.
    static let signinIconPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconPassword")
    /// Image `SigninIconPayPassword`.
    static let signinIconPayPassword = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconPayPassword")
    /// Image `SigninIconPhone`.
    static let signinIconPhone = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconPhone")
    /// Image `SigninIconUser`.
    static let signinIconUser = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconUser")
    /// Image `SigninIconVerificationCode`.
    static let signinIconVerificationCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "SigninIconVerificationCode")
    /// Image `TabOff1`.
    static let tabOff1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOff1")
    /// Image `TabOff2`.
    static let tabOff2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOff2")
    /// Image `TabOff3`.
    static let tabOff3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOff3")
    /// Image `TabOff4`.
    static let tabOff4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOff4")
    /// Image `TabOff5`.
    static let tabOff5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOff5")
    /// Image `TabOn1`.
    static let tabOn1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOn1")
    /// Image `TabOn2`.
    static let tabOn2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOn2")
    /// Image `TabOn3`.
    static let tabOn3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOn3")
    /// Image `TabOn4`.
    static let tabOn4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOn4")
    /// Image `TabOn5`.
    static let tabOn5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabOn5")
    /// Image `TableIconBankcard`.
    static let tableIconBankcard = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconBankcard")
    /// Image `TableIconCollect`.
    static let tableIconCollect = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconCollect")
    /// Image `TableIconOrder`.
    static let tableIconOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconOrder")
    /// Image `TableIconReceiveOrder`.
    static let tableIconReceiveOrder = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconReceiveOrder")
    /// Image `TableIconRecord`.
    static let tableIconRecord = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconRecord")
    /// Image `TableIconSaleSetting`.
    static let tableIconSaleSetting = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconSaleSetting")
    /// Image `TableIconScanCode`.
    static let tableIconScanCode = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconScanCode")
    /// Image `TableIconSetup`.
    static let tableIconSetup = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconSetup")
    /// Image `TableIconShop`.
    static let tableIconShop = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconShop")
    /// Image `TableIconVerification`.
    static let tableIconVerification = Rswift.ImageResource(bundle: R.hostingBundle, name: "TableIconVerification")
    /// Image `TagHot`.
    static let tagHot = Rswift.ImageResource(bundle: R.hostingBundle, name: "TagHot")
    /// Image `TimeSelectDownArrow`.
    static let timeSelectDownArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimeSelectDownArrow")
    /// Image `TimeSelectLeftArrow`.
    static let timeSelectLeftArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimeSelectLeftArrow")
    /// Image `TimeSelectRightArrow`.
    static let timeSelectRightArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimeSelectRightArrow")
    /// Image `TimeSelectTopArrow`.
    static let timeSelectTopArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "TimeSelectTopArrow")
    /// Image `bottom_ic_addto`.
    static let bottom_ic_addto = Rswift.ImageResource(bundle: R.hostingBundle, name: "bottom_ic_addto")
    /// Image `btn_1`.
    static let btn_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_1")
    /// Image `btn_Item_management`.
    static let btn_Item_management = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_Item_management")
    /// Image `btn_activity2`.
    static let btn_activity2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_activity2")
    /// Image `btn_activity3`.
    static let btn_activity3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_activity3")
    /// Image `btn_activity`.
    static let btn_activity = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_activity")
    /// Image `btn_choice_yes`.
    static let btn_choice_yes = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_choice_yes")
    /// Image `btn_commodity_setting`.
    static let btn_commodity_setting = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_commodity_setting")
    /// Image `btn_delete2`.
    static let btn_delete2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_delete2")
    /// Image `btn_delete`.
    static let btn_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_delete")
    /// Image `btn_help`.
    static let btn_help = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_help")
    /// Image `btn_left`.
    static let btn_left = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_left")
    /// Image `btn_modify_password`.
    static let btn_modify_password = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_modify_password")
    /// Image `btn_modify`.
    static let btn_modify = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_modify")
    /// Image `btn_my_shop_assistant`.
    static let btn_my_shop_assistant = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_my_shop_assistant")
    /// Image `btn_right9`.
    static let btn_right9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_right9")
    /// Image `btn_right`.
    static let btn_right = Rswift.ImageResource(bundle: R.hostingBundle, name: "btn_right")
    /// Image `commit_btn_0`.
    static let commit_btn_0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "commit_btn_0")
    /// Image `commit_btn_1`.
    static let commit_btn_1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "commit_btn_1")
    /// Image `first`.
    static let first = Rswift.ImageResource(bundle: R.hostingBundle, name: "first")
    /// Image `guidepage01`.
    static let guidepage01 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guidepage01")
    /// Image `guidepage02`.
    static let guidepage02 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guidepage02")
    /// Image `guidepage03`.
    static let guidepage03 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guidepage03")
    /// Image `guidepage04`.
    static let guidepage04 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guidepage04")
    /// Image `guidepage05`.
    static let guidepage05 = Rswift.ImageResource(bundle: R.hostingBundle, name: "guidepage05")
    /// Image `ic_defaullogo`.
    static let ic_defaullogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_defaullogo")
    /// Image `ic_defaultavatar`.
    static let ic_defaultavatar = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic_defaultavatar")
    /// Image `ico_code_xxh`.
    static let ico_code_xxh = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_code_xxh")
    /// Image `ico_code`.
    static let ico_code = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_code")
    /// Image `ico_phone`.
    static let ico_phone = Rswift.ImageResource(bundle: R.hostingBundle, name: "ico_phone")
    /// Image `icon_bg1-1`.
    static let icon_bg11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg1-1")
    /// Image `icon_bg1`.
    static let icon_bg1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg1")
    /// Image `icon_bg3`.
    static let icon_bg3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg3")
    /// Image `icon_bg`.
    static let icon_bg = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bg")
    /// Image `icon_bgh`.
    static let icon_bgh = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_bgh")
    /// Image `icon_cloud_shield`.
    static let icon_cloud_shield = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cloud_shield")
    /// Image `icon_logo`.
    static let icon_logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_logo")
    /// Image `icon_no_shop_assistant`.
    static let icon_no_shop_assistant = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_no_shop_assistant")
    /// Image `icon_success`.
    static let icon_success = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_success")
    /// Image `icon_time`.
    static let icon_time = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_time")
    /// Image `item_delete`.
    static let item_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "item_delete")
    /// Image `item_modify`.
    static let item_modify = Rswift.ImageResource(bundle: R.hostingBundle, name: "item_modify")
    /// Image `pass_input_box`.
    static let pass_input_box = Rswift.ImageResource(bundle: R.hostingBundle, name: "pass_input_box")
    /// Image `product_btn_copy`.
    static let product_btn_copy = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_copy")
    /// Image `product_btn_delay`.
    static let product_btn_delay = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_delay")
    /// Image `product_btn_delete`.
    static let product_btn_delete = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_delete")
    /// Image `product_btn_off_the_shelf`.
    static let product_btn_off_the_shelf = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_off_the_shelf")
    /// Image `product_btn_preview`.
    static let product_btn_preview = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_preview")
    /// Image `product_btn_share`.
    static let product_btn_share = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_share")
    /// Image `product_btn_stock_replenishment`.
    static let product_btn_stock_replenishment = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_stock_replenishment")
    /// Image `product_btn_suspension`.
    static let product_btn_suspension = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_suspension")
    /// Image `product_btn_the_shelves`.
    static let product_btn_the_shelves = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_btn_the_shelves")
    /// Image `product_head_btn_edit`.
    static let product_head_btn_edit = Rswift.ImageResource(bundle: R.hostingBundle, name: "product_head_btn_edit")
    /// Image `second`.
    static let second = Rswift.ImageResource(bundle: R.hostingBundle, name: "second")
    /// Image `setup-head-default`.
    static let setupHeadDefault = Rswift.ImageResource(bundle: R.hostingBundle, name: "setup-head-default")
    
    /// `UIImage(named: "BankCardBg", bundle: ..., traitCollection: ...)`
    static func bankCardBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankCardBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BankCardLogo", bundle: ..., traitCollection: ...)`
    static func bankCardLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bankCardLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BgBoxDown", bundle: ..., traitCollection: ...)`
    static func bgBoxDown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bgBoxDown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0101", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0101(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0101, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0102", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0102(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0102, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0201", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0201(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0201, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0202", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0202(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0202, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0301", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0301(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0301, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0302", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0302(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0302, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishIconPart0303", bundle: ..., traitCollection: ...)`
    static func btnPublishIconPart0303(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishIconPart0303, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishOff", bundle: ..., traitCollection: ...)`
    static func btnPublishOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BtnPublishOn", bundle: ..., traitCollection: ...)`
    static func btnPublishOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btnPublishOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CampaignTagStop", bundle: ..., traitCollection: ...)`
    static func campaignTagStop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.campaignTagStop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemCheckmark", bundle: ..., traitCollection: ...)`
    static func cellItemCheckmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemCheckmark, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemCheckmarkOff", bundle: ..., traitCollection: ...)`
    static func cellItemCheckmarkOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemCheckmarkOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemCheckmarkOn", bundle: ..., traitCollection: ...)`
    static func cellItemCheckmarkOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemCheckmarkOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemDelete", bundle: ..., traitCollection: ...)`
    static func cellItemDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemDisclosure", bundle: ..., traitCollection: ...)`
    static func cellItemDisclosure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemDisclosure, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemOperation", bundle: ..., traitCollection: ...)`
    static func cellItemOperation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemOperation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellItemWrong", bundle: ..., traitCollection: ...)`
    static func cellItemWrong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellItemWrong, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconBack", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconBack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconBack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconClose", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconDelay", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconDelay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconDelay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconDelivery", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconDelivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconMoney", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconMoney, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconOffShelf", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconOffShelf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconOffShelf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconOnShelf", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconOnShelf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconOnShelf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconPreview", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconPreview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconPreview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconRight", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconShare", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconUnknown", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconUnknown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconUnknown, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CellSidebarIconWrong", bundle: ..., traitCollection: ...)`
    static func cellSidebarIconWrong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cellSidebarIconWrong, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterIconEmblem", bundle: ..., traitCollection: ...)`
    static func centerIconEmblem(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerIconEmblem, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterIconMoney", bundle: ..., traitCollection: ...)`
    static func centerIconMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerIconMoney, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterOrderStatusComplete", bundle: ..., traitCollection: ...)`
    static func centerOrderStatusComplete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerOrderStatusComplete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterOrderStatusDelivery", bundle: ..., traitCollection: ...)`
    static func centerOrderStatusDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerOrderStatusDelivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CenterOrderStatusUnpaid", bundle: ..., traitCollection: ...)`
    static func centerOrderStatusUnpaid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.centerOrderStatusUnpaid, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonBackButton", bundle: ..., traitCollection: ...)`
    static func commonBackButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBackButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonBaseBackButton", bundle: ..., traitCollection: ...)`
    static func commonBaseBackButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBaseBackButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonBgLightGray", bundle: ..., traitCollection: ...)`
    static func commonBgLightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBgLightGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonBlueBg", bundle: ..., traitCollection: ...)`
    static func commonBlueBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonBlueBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonButtonAdd", bundle: ..., traitCollection: ...)`
    static func commonButtonAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonButtonAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonDeleteBadgeButton", bundle: ..., traitCollection: ...)`
    static func commonDeleteBadgeButton(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonDeleteBadgeButton, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonGrayBg", bundle: ..., traitCollection: ...)`
    static func commonGrayBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonGrayBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonIconAddImage", bundle: ..., traitCollection: ...)`
    static func commonIconAddImage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonIconAddImage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonIconBarcode", bundle: ..., traitCollection: ...)`
    static func commonIconBarcode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonIconBarcode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonTopGrayLineButtonBg", bundle: ..., traitCollection: ...)`
    static func commonTopGrayLineButtonBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonTopGrayLineButtonBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CommonTransparentBlackBg", bundle: ..., traitCollection: ...)`
    static func commonTransparentBlackBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commonTransparentBlackBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CoverAddBg", bundle: ..., traitCollection: ...)`
    static func coverAddBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coverAddBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "CoverButtonSelected", bundle: ..., traitCollection: ...)`
    static func coverButtonSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.coverButtonSelected, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HeaderRightWhiteArrow", bundle: ..., traitCollection: ...)`
    static func headerRightWhiteArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headerRightWhiteArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "HeaderRightarrow", bundle: ..., traitCollection: ...)`
    static func headerRightarrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.headerRightarrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "IconAdd", bundle: ..., traitCollection: ...)`
    static func iconAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.iconAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW140H132", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW140H132(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW140H132, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW375H130", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW375H130(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW375H130, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW376H139", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW376H139(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW376H139, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW378H139", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW378H139(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW378H139, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW55H50", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW55H50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW55H50, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW78H78", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW78H78(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW78H78, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ImageDefaultPlaceholderW92H78", bundle: ..., traitCollection: ...)`
    static func imageDefaultPlaceholderW92H78(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.imageDefaultPlaceholderW92H78, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LicenseVerifyStatusAudit", bundle: ..., traitCollection: ...)`
    static func licenseVerifyStatusAudit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.licenseVerifyStatusAudit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LicenseVerifyStatusFailed", bundle: ..., traitCollection: ...)`
    static func licenseVerifyStatusFailed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.licenseVerifyStatusFailed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "LicenseVerifyStatusSuccess", bundle: ..., traitCollection: ...)`
    static func licenseVerifyStatusSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.licenseVerifyStatusSuccess, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MerchantCenterIconAlert", bundle: ..., traitCollection: ...)`
    static func merchantCenterIconAlert(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.merchantCenterIconAlert, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MerchantCenterStatusFailed", bundle: ..., traitCollection: ...)`
    static func merchantCenterStatusFailed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.merchantCenterStatusFailed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MerchantCenterVerificationExample", bundle: ..., traitCollection: ...)`
    static func merchantCenterVerificationExample(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.merchantCenterVerificationExample, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MerchantCenterVerificationSuccess", bundle: ..., traitCollection: ...)`
    static func merchantCenterVerificationSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.merchantCenterVerificationSuccess, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconObligation", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconObligation(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconObligation, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconOver", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconOver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconOver, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconRefund", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconRefund(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconRefund, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconShipped", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconShipped(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconShipped, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconSuccess", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconSuccess(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconSuccess, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyOrderTableIconToBeShipped", bundle: ..., traitCollection: ...)`
    static func myOrderTableIconToBeShipped(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myOrderTableIconToBeShipped, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopCategoryButtonDelete", bundle: ..., traitCollection: ...)`
    static func myShopCategoryButtonDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopCategoryButtonDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopCategoryButtonEdit", bundle: ..., traitCollection: ...)`
    static func myShopCategoryButtonEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopCategoryButtonEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopCategoryButtonStickOff", bundle: ..., traitCollection: ...)`
    static func myShopCategoryButtonStickOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopCategoryButtonStickOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopCategoryButtonStickOn", bundle: ..., traitCollection: ...)`
    static func myShopCategoryButtonStickOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopCategoryButtonStickOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopCategoryIconEditor", bundle: ..., traitCollection: ...)`
    static func myShopCategoryIconEditor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopCategoryIconEditor, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopIconAddress", bundle: ..., traitCollection: ...)`
    static func myShopIconAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopIconAddress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopIconCategory", bundle: ..., traitCollection: ...)`
    static func myShopIconCategory(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopIconCategory, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopIconSettings", bundle: ..., traitCollection: ...)`
    static func myShopIconSettings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopIconSettings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "MyShopProductIconManage", bundle: ..., traitCollection: ...)`
    static func myShopProductIconManage(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.myShopProductIconManage, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NavIconMore", bundle: ..., traitCollection: ...)`
    static func navIconMore(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navIconMore, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NaviIconEdit", bundle: ..., traitCollection: ...)`
    static func naviIconEdit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naviIconEdit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NaviIconFilter", bundle: ..., traitCollection: ...)`
    static func naviIconFilter(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naviIconFilter, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "NaviIconQRCode", bundle: ..., traitCollection: ...)`
    static func naviIconQRCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.naviIconQRCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OrderIconAddress", bundle: ..., traitCollection: ...)`
    static func orderIconAddress(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderIconAddress, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OrderIconUser", bundle: ..., traitCollection: ...)`
    static func orderIconUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderIconUser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "OrderIconUserGray", bundle: ..., traitCollection: ...)`
    static func orderIconUserGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.orderIconUserGray, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PaymentIconAlipay", bundle: ..., traitCollection: ...)`
    static func paymentIconAlipay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentIconAlipay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PaymentIconWallet", bundle: ..., traitCollection: ...)`
    static func paymentIconWallet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentIconWallet, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PaymentIconWechat", bundle: ..., traitCollection: ...)`
    static func paymentIconWechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.paymentIconWechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderAvater", bundle: ..., traitCollection: ...)`
    static func placeHolderAvater(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderAvater, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderBankAccount", bundle: ..., traitCollection: ...)`
    static func placeHolderBankAccount(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderBankAccount, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderExploreIconDefault", bundle: ..., traitCollection: ...)`
    static func placeHolderExploreIconDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderExploreIconDefault, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderHeadportrait", bundle: ..., traitCollection: ...)`
    static func placeHolderHeadportrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderHeadportrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderMianyangBankLogo", bundle: ..., traitCollection: ...)`
    static func placeHolderMianyangBankLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderMianyangBankLogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PlaceHolderUserPortrait", bundle: ..., traitCollection: ...)`
    static func placeHolderUserPortrait(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.placeHolderUserPortrait, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconClose", bundle: ..., traitCollection: ...)`
    static func popoverIconClose(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconClose, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconDelay", bundle: ..., traitCollection: ...)`
    static func popoverIconDelay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconDelay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconDelete", bundle: ..., traitCollection: ...)`
    static func popoverIconDelete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconDelete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconDelivery", bundle: ..., traitCollection: ...)`
    static func popoverIconDelivery(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconDelivery, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconLogistics", bundle: ..., traitCollection: ...)`
    static func popoverIconLogistics(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconLogistics, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconMoney", bundle: ..., traitCollection: ...)`
    static func popoverIconMoney(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconMoney, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconOK", bundle: ..., traitCollection: ...)`
    static func popoverIconOK(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconOK, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconPreview", bundle: ..., traitCollection: ...)`
    static func popoverIconPreview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconPreview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconRefuse", bundle: ..., traitCollection: ...)`
    static func popoverIconRefuse(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconRefuse, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconRight", bundle: ..., traitCollection: ...)`
    static func popoverIconRight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconRight, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconShare", bundle: ..., traitCollection: ...)`
    static func popoverIconShare(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconShare, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconShare-1", bundle: ..., traitCollection: ...)`
    static func popoverIconShare1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconShare1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconUP", bundle: ..., traitCollection: ...)`
    static func popoverIconUP(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconUP, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PopoverIconWrong", bundle: ..., traitCollection: ...)`
    static func popoverIconWrong(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.popoverIconWrong, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "PublishTextLblBg", bundle: ..., traitCollection: ...)`
    static func publishTextLblBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.publishTextLblBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QRCodeBorder", bundle: ..., traitCollection: ...)`
    static func qRCodeBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qRCodeBorder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "QRCodeInputBorder", bundle: ..., traitCollection: ...)`
    static func qRCodeInputBorder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.qRCodeInputBorder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingsIconAbout", bundle: ..., traitCollection: ...)`
    static func settingsIconAbout(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIconAbout, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingsIconFeedback", bundle: ..., traitCollection: ...)`
    static func settingsIconFeedback(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIconFeedback, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingsIconHelp", bundle: ..., traitCollection: ...)`
    static func settingsIconHelp(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIconHelp, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SettingsIconSecurity", bundle: ..., traitCollection: ...)`
    static func settingsIconSecurity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settingsIconSecurity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ShareBtnQQ", bundle: ..., traitCollection: ...)`
    static func shareBtnQQ(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareBtnQQ, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ShareBtnTimeline", bundle: ..., traitCollection: ...)`
    static func shareBtnTimeline(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareBtnTimeline, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ShareBtnWechat", bundle: ..., traitCollection: ...)`
    static func shareBtnWechat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareBtnWechat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ShareLink", bundle: ..., traitCollection: ...)`
    static func shareLink(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shareLink, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ShopAddressNoData", bundle: ..., traitCollection: ...)`
    static func shopAddressNoData(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.shopAddressNoData, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninBg", bundle: ..., traitCollection: ...)`
    static func signinBg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinBg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninBgCenterIcon", bundle: ..., traitCollection: ...)`
    static func signinBgCenterIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinBgCenterIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninBtnEyeOff", bundle: ..., traitCollection: ...)`
    static func signinBtnEyeOff(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinBtnEyeOff, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninBtnEyeOn", bundle: ..., traitCollection: ...)`
    static func signinBtnEyeOn(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinBtnEyeOn, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconPassword", bundle: ..., traitCollection: ...)`
    static func signinIconPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconPassword, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconPasswordLock", bundle: ..., traitCollection: ...)`
    static func signinIconPasswordLock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconPasswordLock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconPayPassword", bundle: ..., traitCollection: ...)`
    static func signinIconPayPassword(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconPayPassword, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconPhone", bundle: ..., traitCollection: ...)`
    static func signinIconPhone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconPhone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconUser", bundle: ..., traitCollection: ...)`
    static func signinIconUser(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconUser, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "SigninIconVerificationCode", bundle: ..., traitCollection: ...)`
    static func signinIconVerificationCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.signinIconVerificationCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOff1", bundle: ..., traitCollection: ...)`
    static func tabOff1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOff1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOff2", bundle: ..., traitCollection: ...)`
    static func tabOff2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOff2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOff3", bundle: ..., traitCollection: ...)`
    static func tabOff3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOff3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOff4", bundle: ..., traitCollection: ...)`
    static func tabOff4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOff4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOff5", bundle: ..., traitCollection: ...)`
    static func tabOff5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOff5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOn1", bundle: ..., traitCollection: ...)`
    static func tabOn1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOn1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOn2", bundle: ..., traitCollection: ...)`
    static func tabOn2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOn2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOn3", bundle: ..., traitCollection: ...)`
    static func tabOn3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOn3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOn4", bundle: ..., traitCollection: ...)`
    static func tabOn4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOn4, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TabOn5", bundle: ..., traitCollection: ...)`
    static func tabOn5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabOn5, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconBankcard", bundle: ..., traitCollection: ...)`
    static func tableIconBankcard(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconBankcard, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconCollect", bundle: ..., traitCollection: ...)`
    static func tableIconCollect(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconCollect, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconOrder", bundle: ..., traitCollection: ...)`
    static func tableIconOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconReceiveOrder", bundle: ..., traitCollection: ...)`
    static func tableIconReceiveOrder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconReceiveOrder, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconRecord", bundle: ..., traitCollection: ...)`
    static func tableIconRecord(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconRecord, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconSaleSetting", bundle: ..., traitCollection: ...)`
    static func tableIconSaleSetting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconSaleSetting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconScanCode", bundle: ..., traitCollection: ...)`
    static func tableIconScanCode(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconScanCode, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconSetup", bundle: ..., traitCollection: ...)`
    static func tableIconSetup(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconSetup, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconShop", bundle: ..., traitCollection: ...)`
    static func tableIconShop(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconShop, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TableIconVerification", bundle: ..., traitCollection: ...)`
    static func tableIconVerification(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tableIconVerification, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TagHot", bundle: ..., traitCollection: ...)`
    static func tagHot(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tagHot, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimeSelectDownArrow", bundle: ..., traitCollection: ...)`
    static func timeSelectDownArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeSelectDownArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimeSelectLeftArrow", bundle: ..., traitCollection: ...)`
    static func timeSelectLeftArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeSelectLeftArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimeSelectRightArrow", bundle: ..., traitCollection: ...)`
    static func timeSelectRightArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeSelectRightArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "TimeSelectTopArrow", bundle: ..., traitCollection: ...)`
    static func timeSelectTopArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.timeSelectTopArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "bottom_ic_addto", bundle: ..., traitCollection: ...)`
    static func bottom_ic_addto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bottom_ic_addto, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_1", bundle: ..., traitCollection: ...)`
    static func btn_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_Item_management", bundle: ..., traitCollection: ...)`
    static func btn_Item_management(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_Item_management, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_activity", bundle: ..., traitCollection: ...)`
    static func btn_activity(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_activity, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_activity2", bundle: ..., traitCollection: ...)`
    static func btn_activity2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_activity2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_activity3", bundle: ..., traitCollection: ...)`
    static func btn_activity3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_activity3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_choice_yes", bundle: ..., traitCollection: ...)`
    static func btn_choice_yes(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_choice_yes, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_commodity_setting", bundle: ..., traitCollection: ...)`
    static func btn_commodity_setting(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_commodity_setting, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete", bundle: ..., traitCollection: ...)`
    static func btn_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_delete2", bundle: ..., traitCollection: ...)`
    static func btn_delete2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_delete2, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_help", bundle: ..., traitCollection: ...)`
    static func btn_help(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_help, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_left", bundle: ..., traitCollection: ...)`
    static func btn_left(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_left, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_modify", bundle: ..., traitCollection: ...)`
    static func btn_modify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_modify, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_modify_password", bundle: ..., traitCollection: ...)`
    static func btn_modify_password(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_modify_password, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_my_shop_assistant", bundle: ..., traitCollection: ...)`
    static func btn_my_shop_assistant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_my_shop_assistant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_right", bundle: ..., traitCollection: ...)`
    static func btn_right(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_right, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "btn_right9", bundle: ..., traitCollection: ...)`
    static func btn_right9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.btn_right9, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commit_btn_0", bundle: ..., traitCollection: ...)`
    static func commit_btn_0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commit_btn_0, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "commit_btn_1", bundle: ..., traitCollection: ...)`
    static func commit_btn_1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.commit_btn_1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "first", bundle: ..., traitCollection: ...)`
    static func first(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.first, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guidepage01", bundle: ..., traitCollection: ...)`
    static func guidepage01(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guidepage01, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guidepage02", bundle: ..., traitCollection: ...)`
    static func guidepage02(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guidepage02, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guidepage03", bundle: ..., traitCollection: ...)`
    static func guidepage03(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guidepage03, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guidepage04", bundle: ..., traitCollection: ...)`
    static func guidepage04(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guidepage04, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "guidepage05", bundle: ..., traitCollection: ...)`
    static func guidepage05(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.guidepage05, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_defaullogo", bundle: ..., traitCollection: ...)`
    static func ic_defaullogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_defaullogo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ic_defaultavatar", bundle: ..., traitCollection: ...)`
    static func ic_defaultavatar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ic_defaultavatar, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_code", bundle: ..., traitCollection: ...)`
    static func ico_code(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_code, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_code_xxh", bundle: ..., traitCollection: ...)`
    static func ico_code_xxh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_code_xxh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "ico_phone", bundle: ..., traitCollection: ...)`
    static func ico_phone(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.ico_phone, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg", bundle: ..., traitCollection: ...)`
    static func icon_bg(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg1", bundle: ..., traitCollection: ...)`
    static func icon_bg1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg1-1", bundle: ..., traitCollection: ...)`
    static func icon_bg11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg11, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bg3", bundle: ..., traitCollection: ...)`
    static func icon_bg3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bg3, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_bgh", bundle: ..., traitCollection: ...)`
    static func icon_bgh(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_bgh, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_cloud_shield", bundle: ..., traitCollection: ...)`
    static func icon_cloud_shield(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cloud_shield, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_logo", bundle: ..., traitCollection: ...)`
    static func icon_logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_logo, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_no_shop_assistant", bundle: ..., traitCollection: ...)`
    static func icon_no_shop_assistant(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_no_shop_assistant, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_success", bundle: ..., traitCollection: ...)`
    static func icon_success(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_success, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "icon_time", bundle: ..., traitCollection: ...)`
    static func icon_time(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_time, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "item_delete", bundle: ..., traitCollection: ...)`
    static func item_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.item_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "item_modify", bundle: ..., traitCollection: ...)`
    static func item_modify(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.item_modify, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pass_input_box", bundle: ..., traitCollection: ...)`
    static func pass_input_box(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pass_input_box, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_copy", bundle: ..., traitCollection: ...)`
    static func product_btn_copy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_copy, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_delay", bundle: ..., traitCollection: ...)`
    static func product_btn_delay(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_delay, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_delete", bundle: ..., traitCollection: ...)`
    static func product_btn_delete(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_delete, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_off_the_shelf", bundle: ..., traitCollection: ...)`
    static func product_btn_off_the_shelf(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_off_the_shelf, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_preview", bundle: ..., traitCollection: ...)`
    static func product_btn_preview(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_preview, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_share", bundle: ..., traitCollection: ...)`
    static func product_btn_share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_share, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_stock_replenishment", bundle: ..., traitCollection: ...)`
    static func product_btn_stock_replenishment(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_stock_replenishment, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_suspension", bundle: ..., traitCollection: ...)`
    static func product_btn_suspension(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_suspension, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_btn_the_shelves", bundle: ..., traitCollection: ...)`
    static func product_btn_the_shelves(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_btn_the_shelves, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "product_head_btn_edit", bundle: ..., traitCollection: ...)`
    static func product_head_btn_edit(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.product_head_btn_edit, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "second", bundle: ..., traitCollection: ...)`
    static func second(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.second, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "setup-head-default", bundle: ..., traitCollection: ...)`
    static func setupHeadDefault(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.setupHeadDefault, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 63 nibs.
  struct nib {
    /// Nib `AdAddAnswerTableViewCell`.
    static let adAddAnswerTableViewCell = _R.nib._AdAddAnswerTableViewCell()
    /// Nib `AdTableViewCell`.
    static let adTableViewCell = _R.nib._AdTableViewCell()
    /// Nib `AddPhotoViewController`.
    static let addPhotoViewController = _R.nib._AddPhotoViewController()
    /// Nib `AddShopAssistantContentView`.
    static let addShopAssistantContentView = _R.nib._AddShopAssistantContentView()
    /// Nib `BankAccountInfoTableViewCell`.
    static let bankAccountInfoTableViewCell = _R.nib._BankAccountInfoTableViewCell()
    /// Nib `BuyNoteAttributeTableViewCell`.
    static let buyNoteAttributeTableViewCell = _R.nib._BuyNoteAttributeTableViewCell()
    /// Nib `CampaginChooseItemCell`.
    static let campaginChooseItemCell = _R.nib._CampaginChooseItemCell()
    /// Nib `CampaignTableViewCell`.
    static let campaignTableViewCell = _R.nib._CampaignTableViewCell()
    /// Nib `CenterTxtFieldTableViewCell`.
    static let centerTxtFieldTableViewCell = _R.nib._CenterTxtFieldTableViewCell()
    /// Nib `CouponRuleTableViewCell`.
    static let couponRuleTableViewCell = _R.nib._CouponRuleTableViewCell()
    /// Nib `DefaultTxtTableViewCell`.
    static let defaultTxtTableViewCell = _R.nib._DefaultTxtTableViewCell()
    /// Nib `DiscountTableViewCell`.
    static let discountTableViewCell = _R.nib._DiscountTableViewCell()
    /// Nib `DoMoreFooterTableViewCell`.
    static let doMoreFooterTableViewCell = _R.nib._DoMoreFooterTableViewCell()
    /// Nib `EditStaffContentView`.
    static let editStaffContentView = _R.nib._EditStaffContentView()
    /// Nib `InputView`.
    static let inputView = _R.nib._InputView()
    /// Nib `ItemDetailTableViewCell`.
    static let itemDetailTableViewCell = _R.nib._ItemDetailTableViewCell()
    /// Nib `ItemManageTableViewCell`.
    static let itemManageTableViewCell = _R.nib._ItemManageTableViewCell()
    /// Nib `ModifyItemSpecTableViewCell`.
    static let modifyItemSpecTableViewCell = _R.nib._ModifyItemSpecTableViewCell()
    /// Nib `MyCollectTableViewCell`.
    static let myCollectTableViewCell = _R.nib._MyCollectTableViewCell()
    /// Nib `MyShopAssistantDefaultView`.
    static let myShopAssistantDefaultView = _R.nib._MyShopAssistantDefaultView()
    /// Nib `MyShopProductCategoryEditTableViewCell`.
    static let myShopProductCategoryEditTableViewCell = _R.nib._MyShopProductCategoryEditTableViewCell()
    /// Nib `MyShopProductCategoryTableViewCell`.
    static let myShopProductCategoryTableViewCell = _R.nib._MyShopProductCategoryTableViewCell()
    /// Nib `MyShopProductDefaultCategoryCell`.
    static let myShopProductDefaultCategoryCell = _R.nib._MyShopProductDefaultCategoryCell()
    /// Nib `MyShopProductManageTableViewCell`.
    static let myShopProductManageTableViewCell = _R.nib._MyShopProductManageTableViewCell()
    /// Nib `NoneReduceView`.
    static let noneReduceView = _R.nib._NoneReduceView()
    /// Nib `NormalDescTableViewCell`.
    static let normalDescTableViewCell = _R.nib._NormalDescTableViewCell()
    /// Nib `NotificationTableViewCell`.
    static let notificationTableViewCell = _R.nib._NotificationTableViewCell()
    /// Nib `ObjectAttributeTableViewCell`.
    static let objectAttributeTableViewCell = _R.nib._ObjectAttributeTableViewCell()
    /// Nib `OrderAddressDetailTableViewCell`.
    static let orderAddressDetailTableViewCell = _R.nib._OrderAddressDetailTableViewCell()
    /// Nib `OrderDeliveryTableViewCell`.
    static let orderDeliveryTableViewCell = _R.nib._OrderDeliveryTableViewCell()
    /// Nib `OrderDescTableViewCell`.
    static let orderDescTableViewCell = _R.nib._OrderDescTableViewCell()
    /// Nib `OrderFooterTableViewCell`.
    static let orderFooterTableViewCell = _R.nib._OrderFooterTableViewCell()
    /// Nib `OrderHeaderTableViewCell`.
    static let orderHeaderTableViewCell = _R.nib._OrderHeaderTableViewCell()
    /// Nib `OrderLogisticsTracksTableViewCell`.
    static let orderLogisticsTracksTableViewCell = _R.nib._OrderLogisticsTracksTableViewCell()
    /// Nib `OrderProductDescTableViewCell`.
    static let orderProductDescTableViewCell = _R.nib._OrderProductDescTableViewCell()
    /// Nib `OrderSimpleFooterTableViewCell`.
    static let orderSimpleFooterTableViewCell = _R.nib._OrderSimpleFooterTableViewCell()
    /// Nib `OrderSimpleHeaderTableViewCell`.
    static let orderSimpleHeaderTableViewCell = _R.nib._OrderSimpleHeaderTableViewCell()
    /// Nib `PayTextFieldTableViewCell`.
    static let payTextFieldTableViewCell = _R.nib._PayTextFieldTableViewCell()
    /// Nib `PhotoDetailViewController`.
    static let photoDetailViewController = _R.nib._PhotoDetailViewController()
    /// Nib `ProductCategoryTableViewCell`.
    static let productCategoryTableViewCell = _R.nib._ProductCategoryTableViewCell()
    /// Nib `ProductChoosecodeCell`.
    static let productChoosecodeCell = _R.nib._ProductChoosecodeCell()
    /// Nib `ProductDetailPhotoTableViewCell`.
    static let productDetailPhotoTableViewCell = _R.nib._ProductDetailPhotoTableViewCell()
    /// Nib `ProductStockTableViewCell`.
    static let productStockTableViewCell = _R.nib._ProductStockTableViewCell()
    /// Nib `ProductTableViewCell`.
    static let productTableViewCell = _R.nib._ProductTableViewCell()
    /// Nib `QrCodeCoverView`.
    static let qrCodeCoverView = _R.nib._QrCodeCoverView()
    /// Nib `ReduceTableViewCell`.
    static let reduceTableViewCell = _R.nib._ReduceTableViewCell()
    /// Nib `RefundImgageTableViewCell`.
    static let refundImgageTableViewCell = _R.nib._RefundImgageTableViewCell()
    /// Nib `RightImageTableViewCell`.
    static let rightImageTableViewCell = _R.nib._RightImageTableViewCell()
    /// Nib `RightTxtFieldTableViewCell`.
    static let rightTxtFieldTableViewCell = _R.nib._RightTxtFieldTableViewCell()
    /// Nib `RuleChooseView`.
    static let ruleChooseView = _R.nib._RuleChooseView()
    /// Nib `RuleTableViewCell`.
    static let ruleTableViewCell = _R.nib._RuleTableViewCell()
    /// Nib `SetItemCatTableViewCell`.
    static let setItemCatTableViewCell = _R.nib._SetItemCatTableViewCell()
    /// Nib `SetItemCodeTableViewCell`.
    static let setItemCodeTableViewCell = _R.nib._SetItemCodeTableViewCell()
    /// Nib `SetProductSpecTableViewCell`.
    static let setProductSpecTableViewCell = _R.nib._SetProductSpecTableViewCell()
    /// Nib `SettingCoverView`.
    static let settingCoverView = _R.nib._SettingCoverView()
    /// Nib `ShopAssistantTableViewCell`.
    static let shopAssistantTableViewCell = _R.nib._ShopAssistantTableViewCell()
    /// Nib `ShopCategoryTableViewCell`.
    static let shopCategoryTableViewCell = _R.nib._ShopCategoryTableViewCell()
    /// Nib `ShopInfoAttributeTableViewCell`.
    static let shopInfoAttributeTableViewCell = _R.nib._ShopInfoAttributeTableViewCell()
    /// Nib `ShowDatePickerView`.
    static let showDatePickerView = _R.nib._ShowDatePickerView()
    /// Nib `StatusView`.
    static let statusView = _R.nib._StatusView()
    /// Nib `TextCounterTableViewCell`.
    static let textCounterTableViewCell = _R.nib._TextCounterTableViewCell()
    /// Nib `TimeSelectViewController`.
    static let timeSelectViewController = _R.nib._TimeSelectViewController()
    /// Nib `VerifiCodeCell`.
    static let verifiCodeCell = _R.nib._VerifiCodeCell()
    
    /// `UINib(name: "AdAddAnswerTableViewCell", in: bundle)`
    static func adAddAnswerTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adAddAnswerTableViewCell)
    }
    
    /// `UINib(name: "AdTableViewCell", in: bundle)`
    static func adTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.adTableViewCell)
    }
    
    /// `UINib(name: "AddPhotoViewController", in: bundle)`
    static func addPhotoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addPhotoViewController)
    }
    
    /// `UINib(name: "AddShopAssistantContentView", in: bundle)`
    static func addShopAssistantContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.addShopAssistantContentView)
    }
    
    /// `UINib(name: "BankAccountInfoTableViewCell", in: bundle)`
    static func bankAccountInfoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.bankAccountInfoTableViewCell)
    }
    
    /// `UINib(name: "BuyNoteAttributeTableViewCell", in: bundle)`
    static func buyNoteAttributeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.buyNoteAttributeTableViewCell)
    }
    
    /// `UINib(name: "CampaginChooseItemCell", in: bundle)`
    static func campaginChooseItemCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.campaginChooseItemCell)
    }
    
    /// `UINib(name: "CampaignTableViewCell", in: bundle)`
    static func campaignTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.campaignTableViewCell)
    }
    
    /// `UINib(name: "CenterTxtFieldTableViewCell", in: bundle)`
    static func centerTxtFieldTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.centerTxtFieldTableViewCell)
    }
    
    /// `UINib(name: "CouponRuleTableViewCell", in: bundle)`
    static func couponRuleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.couponRuleTableViewCell)
    }
    
    /// `UINib(name: "DefaultTxtTableViewCell", in: bundle)`
    static func defaultTxtTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.defaultTxtTableViewCell)
    }
    
    /// `UINib(name: "DiscountTableViewCell", in: bundle)`
    static func discountTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.discountTableViewCell)
    }
    
    /// `UINib(name: "DoMoreFooterTableViewCell", in: bundle)`
    static func doMoreFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.doMoreFooterTableViewCell)
    }
    
    /// `UINib(name: "EditStaffContentView", in: bundle)`
    static func editStaffContentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editStaffContentView)
    }
    
    /// `UINib(name: "InputView", in: bundle)`
    static func inputView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inputView)
    }
    
    /// `UINib(name: "ItemDetailTableViewCell", in: bundle)`
    static func itemDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemDetailTableViewCell)
    }
    
    /// `UINib(name: "ItemManageTableViewCell", in: bundle)`
    static func itemManageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.itemManageTableViewCell)
    }
    
    /// `UINib(name: "ModifyItemSpecTableViewCell", in: bundle)`
    static func modifyItemSpecTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.modifyItemSpecTableViewCell)
    }
    
    /// `UINib(name: "MyCollectTableViewCell", in: bundle)`
    static func myCollectTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myCollectTableViewCell)
    }
    
    /// `UINib(name: "MyShopAssistantDefaultView", in: bundle)`
    static func myShopAssistantDefaultView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShopAssistantDefaultView)
    }
    
    /// `UINib(name: "MyShopProductCategoryEditTableViewCell", in: bundle)`
    static func myShopProductCategoryEditTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShopProductCategoryEditTableViewCell)
    }
    
    /// `UINib(name: "MyShopProductCategoryTableViewCell", in: bundle)`
    static func myShopProductCategoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShopProductCategoryTableViewCell)
    }
    
    /// `UINib(name: "MyShopProductDefaultCategoryCell", in: bundle)`
    static func myShopProductDefaultCategoryCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShopProductDefaultCategoryCell)
    }
    
    /// `UINib(name: "MyShopProductManageTableViewCell", in: bundle)`
    static func myShopProductManageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.myShopProductManageTableViewCell)
    }
    
    /// `UINib(name: "NoneReduceView", in: bundle)`
    static func noneReduceView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noneReduceView)
    }
    
    /// `UINib(name: "NormalDescTableViewCell", in: bundle)`
    static func normalDescTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.normalDescTableViewCell)
    }
    
    /// `UINib(name: "NotificationTableViewCell", in: bundle)`
    static func notificationTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.notificationTableViewCell)
    }
    
    /// `UINib(name: "ObjectAttributeTableViewCell", in: bundle)`
    static func objectAttributeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.objectAttributeTableViewCell)
    }
    
    /// `UINib(name: "OrderAddressDetailTableViewCell", in: bundle)`
    static func orderAddressDetailTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderAddressDetailTableViewCell)
    }
    
    /// `UINib(name: "OrderDeliveryTableViewCell", in: bundle)`
    static func orderDeliveryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDeliveryTableViewCell)
    }
    
    /// `UINib(name: "OrderDescTableViewCell", in: bundle)`
    static func orderDescTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderDescTableViewCell)
    }
    
    /// `UINib(name: "OrderFooterTableViewCell", in: bundle)`
    static func orderFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderFooterTableViewCell)
    }
    
    /// `UINib(name: "OrderHeaderTableViewCell", in: bundle)`
    static func orderHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderHeaderTableViewCell)
    }
    
    /// `UINib(name: "OrderLogisticsTracksTableViewCell", in: bundle)`
    static func orderLogisticsTracksTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderLogisticsTracksTableViewCell)
    }
    
    /// `UINib(name: "OrderProductDescTableViewCell", in: bundle)`
    static func orderProductDescTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderProductDescTableViewCell)
    }
    
    /// `UINib(name: "OrderSimpleFooterTableViewCell", in: bundle)`
    static func orderSimpleFooterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSimpleFooterTableViewCell)
    }
    
    /// `UINib(name: "OrderSimpleHeaderTableViewCell", in: bundle)`
    static func orderSimpleHeaderTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.orderSimpleHeaderTableViewCell)
    }
    
    /// `UINib(name: "PayTextFieldTableViewCell", in: bundle)`
    static func payTextFieldTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.payTextFieldTableViewCell)
    }
    
    /// `UINib(name: "PhotoDetailViewController", in: bundle)`
    static func photoDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoDetailViewController)
    }
    
    /// `UINib(name: "ProductCategoryTableViewCell", in: bundle)`
    static func productCategoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productCategoryTableViewCell)
    }
    
    /// `UINib(name: "ProductChoosecodeCell", in: bundle)`
    static func productChoosecodeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productChoosecodeCell)
    }
    
    /// `UINib(name: "ProductDetailPhotoTableViewCell", in: bundle)`
    static func productDetailPhotoTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productDetailPhotoTableViewCell)
    }
    
    /// `UINib(name: "ProductStockTableViewCell", in: bundle)`
    static func productStockTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productStockTableViewCell)
    }
    
    /// `UINib(name: "ProductTableViewCell", in: bundle)`
    static func productTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.productTableViewCell)
    }
    
    /// `UINib(name: "QrCodeCoverView", in: bundle)`
    static func qrCodeCoverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qrCodeCoverView)
    }
    
    /// `UINib(name: "ReduceTableViewCell", in: bundle)`
    static func reduceTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.reduceTableViewCell)
    }
    
    /// `UINib(name: "RefundImgageTableViewCell", in: bundle)`
    static func refundImgageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.refundImgageTableViewCell)
    }
    
    /// `UINib(name: "RightImageTableViewCell", in: bundle)`
    static func rightImageTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightImageTableViewCell)
    }
    
    /// `UINib(name: "RightTxtFieldTableViewCell", in: bundle)`
    static func rightTxtFieldTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.rightTxtFieldTableViewCell)
    }
    
    /// `UINib(name: "RuleChooseView", in: bundle)`
    static func ruleChooseView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ruleChooseView)
    }
    
    /// `UINib(name: "RuleTableViewCell", in: bundle)`
    static func ruleTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.ruleTableViewCell)
    }
    
    /// `UINib(name: "SetItemCatTableViewCell", in: bundle)`
    static func setItemCatTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setItemCatTableViewCell)
    }
    
    /// `UINib(name: "SetItemCodeTableViewCell", in: bundle)`
    static func setItemCodeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setItemCodeTableViewCell)
    }
    
    /// `UINib(name: "SetProductSpecTableViewCell", in: bundle)`
    static func setProductSpecTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.setProductSpecTableViewCell)
    }
    
    /// `UINib(name: "SettingCoverView", in: bundle)`
    static func settingCoverView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingCoverView)
    }
    
    /// `UINib(name: "ShopAssistantTableViewCell", in: bundle)`
    static func shopAssistantTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopAssistantTableViewCell)
    }
    
    /// `UINib(name: "ShopCategoryTableViewCell", in: bundle)`
    static func shopCategoryTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopCategoryTableViewCell)
    }
    
    /// `UINib(name: "ShopInfoAttributeTableViewCell", in: bundle)`
    static func shopInfoAttributeTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.shopInfoAttributeTableViewCell)
    }
    
    /// `UINib(name: "ShowDatePickerView", in: bundle)`
    static func showDatePickerView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.showDatePickerView)
    }
    
    /// `UINib(name: "StatusView", in: bundle)`
    static func statusView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.statusView)
    }
    
    /// `UINib(name: "TextCounterTableViewCell", in: bundle)`
    static func textCounterTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.textCounterTableViewCell)
    }
    
    /// `UINib(name: "TimeSelectViewController", in: bundle)`
    static func timeSelectViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.timeSelectViewController)
    }
    
    /// `UINib(name: "VerifiCodeCell", in: bundle)`
    static func verifiCodeCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.verifiCodeCell)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 28 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `5SAdTableViewCell`.
    static let sAdTableViewCell: Rswift.ReuseIdentifier<AdTableViewCell> = Rswift.ReuseIdentifier(identifier: "5SAdTableViewCell")
    /// Reuse identifier `AdTableViewCell`.
    static let adTableViewCell: Rswift.ReuseIdentifier<AdTableViewCell> = Rswift.ReuseIdentifier(identifier: "AdTableViewCell")
    /// Reuse identifier `CampaignRelatedProductTableViewCell`.
    static let campaignRelatedProductTableViewCell: Rswift.ReuseIdentifier<CampaignRelatedProductTableViewCell> = Rswift.ReuseIdentifier(identifier: "CampaignRelatedProductTableViewCell")
    /// Reuse identifier `DiscountTableViewCell`.
    static let discountTableViewCell: Rswift.ReuseIdentifier<DiscountTableViewCell> = Rswift.ReuseIdentifier(identifier: "DiscountTableViewCell")
    /// Reuse identifier `IncomeOutgoingTableViewCell`.
    static let incomeOutgoingTableViewCell: Rswift.ReuseIdentifier<IncomeOutgoingTableViewCell> = Rswift.ReuseIdentifier(identifier: "IncomeOutgoingTableViewCell")
    /// Reuse identifier `MerchantCenterLogoutCell`.
    static let merchantCenterLogoutCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "MerchantCenterLogoutCell")
    /// Reuse identifier `MerchantCenterOrderId`.
    static let merchantCenterOrderId: Rswift.ReuseIdentifier<MerchantCenterOrderTableViewCell> = Rswift.ReuseIdentifier(identifier: "MerchantCenterOrderId")
    /// Reuse identifier `MerchantCenterPointId`.
    static let merchantCenterPointId: Rswift.ReuseIdentifier<MerchantCenterPointTableViewCell> = Rswift.ReuseIdentifier(identifier: "MerchantCenterPointId")
    /// Reuse identifier `MyCollectTableViewCell`.
    static let myCollectTableViewCell: Rswift.ReuseIdentifier<MyCollectTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyCollectTableViewCell")
    /// Reuse identifier `MyShopHeaderTableViewCell`.
    static let myShopHeaderTableViewCell: Rswift.ReuseIdentifier<MyShopHeaderTableViewCell> = Rswift.ReuseIdentifier(identifier: "MyShopHeaderTableViewCell")
    /// Reuse identifier `OrderCountTableViewCell`.
    static let orderCountTableViewCell: Rswift.ReuseIdentifier<OrderCountTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderCountTableViewCell")
    /// Reuse identifier `OrderDeliveryCompanyTableViewCell2`.
    static let orderDeliveryCompanyTableViewCell2: Rswift.ReuseIdentifier<OrderDeliveryCompanyTableViewCell2> = Rswift.ReuseIdentifier(identifier: "OrderDeliveryCompanyTableViewCell2")
    /// Reuse identifier `OrderDeliveryCompanyTableViewCell`.
    static let orderDeliveryCompanyTableViewCell: Rswift.ReuseIdentifier<OrderDeliveryCompanyTableViewCell> = Rswift.ReuseIdentifier(identifier: "OrderDeliveryCompanyTableViewCell")
    /// Reuse identifier `ParticipatorCell`.
    static let participatorCell: Rswift.ReuseIdentifier<ParticipatorCell> = Rswift.ReuseIdentifier(identifier: "ParticipatorCell")
    /// Reuse identifier `PayTextFieldTableViewCell`.
    static let payTextFieldTableViewCell: Rswift.ReuseIdentifier<PayTextFieldTableViewCell> = Rswift.ReuseIdentifier(identifier: "PayTextFieldTableViewCell")
    /// Reuse identifier `ProductDetailPhotoTableViewCell`.
    static let productDetailPhotoTableViewCell: Rswift.ReuseIdentifier<ProductDetailPhotoTableViewCell> = Rswift.ReuseIdentifier(identifier: "ProductDetailPhotoTableViewCell")
    /// Reuse identifier `ReduceTableViewCell`.
    static let reduceTableViewCell: Rswift.ReuseIdentifier<ReduceTableViewCell> = Rswift.ReuseIdentifier(identifier: "ReduceTableViewCell")
    /// Reuse identifier `RefundImgageTableViewCell`.
    static let refundImgageTableViewCell: Rswift.ReuseIdentifier<RefundImgageTableViewCell> = Rswift.ReuseIdentifier(identifier: "RefundImgageTableViewCell")
    /// Reuse identifier `RightSegmentCell`.
    static let rightSegmentCell: Rswift.ReuseIdentifier<RightSegmentCell> = Rswift.ReuseIdentifier(identifier: "RightSegmentCell")
    /// Reuse identifier `RightTxtViewTableViewCell`.
    static let rightTxtViewTableViewCell: Rswift.ReuseIdentifier<RightTxtViewTableViewCell> = Rswift.ReuseIdentifier(identifier: "RightTxtViewTableViewCell")
    /// Reuse identifier `RuleTableViewCell`.
    static let ruleTableViewCell: Rswift.ReuseIdentifier<RuleTableViewCell> = Rswift.ReuseIdentifier(identifier: "RuleTableViewCell")
    /// Reuse identifier `SaleCouponTableViewCell`.
    static let saleCouponTableViewCell: Rswift.ReuseIdentifier<SaleCouponTableViewCell> = Rswift.ReuseIdentifier(identifier: "SaleCouponTableViewCell")
    /// Reuse identifier `ShopAddressSelectTableViewCell`.
    static let shopAddressSelectTableViewCell: Rswift.ReuseIdentifier<ShopAddressSelectTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShopAddressSelectTableViewCell")
    /// Reuse identifier `ShopCoverSelectTableViewCell`.
    static let shopCoverSelectTableViewCell: Rswift.ReuseIdentifier<ShopCoverSelectTableViewCell> = Rswift.ReuseIdentifier(identifier: "ShopCoverSelectTableViewCell")
    /// Reuse identifier `ShopProductCategorySelectionCell`.
    static let shopProductCategorySelectionCell: Rswift.ReuseIdentifier<ShopProductCategorySelectionCell> = Rswift.ReuseIdentifier(identifier: "ShopProductCategorySelectionCell")
    /// Reuse identifier `VerificationPhotoCell`.
    static let verificationPhotoCell: Rswift.ReuseIdentifier<VerificationPhotoCell> = Rswift.ReuseIdentifier(identifier: "VerificationPhotoCell")
    /// Reuse identifier `VerificationPhotoUploadCell`.
    static let verificationPhotoUploadCell: Rswift.ReuseIdentifier<VerificationPhotoUploadCell> = Rswift.ReuseIdentifier(identifier: "VerificationPhotoUploadCell")
    /// Reuse identifier `VerificationStatusCell`.
    static let verificationStatusCell: Rswift.ReuseIdentifier<VerificationStatusCell> = Rswift.ReuseIdentifier(identifier: "VerificationStatusCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 35 view controllers.
  struct segue {
    /// This struct is generated for `AdAddNewViewController`, and contains static references to 1 segues.
    struct adAddNewViewController {
      /// Segue identifier `AdAddMovieViewControllerSegue`.
      static let adAddMovieViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AdAddNewViewController, AdAddMovieViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AdAddMovieViewControllerSegue")
      
      /// Optionally returns a typed version of segue `AdAddMovieViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func adAddMovieViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AdAddNewViewController, AdAddMovieViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.adAddNewViewController.adAddMovieViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `AdDetailViewController`, and contains static references to 1 segues.
    struct adDetailViewController {
      /// Segue identifier `AdQuestionDetailViewControllerSegue`.
      static let adQuestionDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, AdDetailViewController, AdQuestionDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AdQuestionDetailViewControllerSegue")
      
      /// Optionally returns a typed version of segue `AdQuestionDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func adQuestionDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, AdDetailViewController, AdQuestionDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.adDetailViewController.adQuestionDetailViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignAddNewPlaceViewController`, and contains static references to 1 segues.
    struct campaignAddNewPlaceViewController {
      /// Segue identifier `CampaignParticipatorViewControllerSegue`.
      static let campaignParticipatorViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignAddNewPlaceViewController, CampaignParticipatorViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignParticipatorViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignParticipatorViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignParticipatorViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignAddNewPlaceViewController, CampaignParticipatorViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignAddNewPlaceViewController.campaignParticipatorViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignAddNewSaleViewController`, and contains static references to 2 segues.
    struct campaignAddNewSaleViewController {
      /// Segue identifier `CampaignAddNewCouponRuleViewControllerSegue`.
      static let campaignAddNewCouponRuleViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignAddNewSaleViewController, CampaignAddNewCouponRuleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignAddNewCouponRuleViewControllerSegue")
      /// Segue identifier `CampaignAddRelatedProductsViewControllerSegue`.
      static let campaignAddRelatedProductsViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignAddNewSaleViewController, CampaignAddRelatedProductsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignAddRelatedProductsViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignAddNewCouponRuleViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignAddNewCouponRuleViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignAddNewSaleViewController, CampaignAddNewCouponRuleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignAddNewSaleViewController.campaignAddNewCouponRuleViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `CampaignAddRelatedProductsViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignAddRelatedProductsViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignAddNewSaleViewController, CampaignAddRelatedProductsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignAddNewSaleViewController.campaignAddRelatedProductsViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignAddRelatedProductsViewController`, and contains static references to 1 segues.
    struct campaignAddRelatedProductsViewController {
      /// Segue identifier `CampaignProductFilterViewControllerSegue`.
      static let campaignProductFilterViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignAddRelatedProductsViewController, CampaignProductFilterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignProductFilterViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignProductFilterViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignProductFilterViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignAddRelatedProductsViewController, CampaignProductFilterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignAddRelatedProductsViewController.campaignProductFilterViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignHomeViewController`, and contains static references to 4 segues.
    struct campaignHomeViewController {
      /// Segue identifier `CampaignAddNewPlaceViewControllerSegue`.
      static let campaignAddNewPlaceViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignAddNewPlaceViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignAddNewPlaceViewControllerSegue")
      /// Segue identifier `CampaignAddNewSaleViewControllerSegue`.
      static let campaignAddNewSaleViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignAddNewSaleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignAddNewSaleViewControllerSegue")
      /// Segue identifier `CampaignPlaceDetailViewControllerSegue`.
      static let campaignPlaceDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignPlaceDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignPlaceDetailViewControllerSegue")
      /// Segue identifier `CampaignSaleDetailViewControllerSegue`.
      static let campaignSaleDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignSaleDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignSaleDetailViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignAddNewPlaceViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignAddNewPlaceViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignAddNewPlaceViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignHomeViewController.campaignAddNewPlaceViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `CampaignAddNewSaleViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignAddNewSaleViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignAddNewSaleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignHomeViewController.campaignAddNewSaleViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `CampaignPlaceDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignPlaceDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignPlaceDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignHomeViewController.campaignPlaceDetailViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `CampaignSaleDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignSaleDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignHomeViewController, CampaignSaleDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignHomeViewController.campaignSaleDetailViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignPlaceDetailViewController`, and contains static references to 1 segues.
    struct campaignPlaceDetailViewController {
      /// Segue identifier `CampaignParticipatorViewControllerSegue`.
      static let campaignParticipatorViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignPlaceDetailViewController, CampaignParticipatorViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignParticipatorViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignParticipatorViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignParticipatorViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignPlaceDetailViewController, CampaignParticipatorViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignPlaceDetailViewController.campaignParticipatorViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `CampaignSaleDetailViewController`, and contains static references to 1 segues.
    struct campaignSaleDetailViewController {
      /// Segue identifier `CampaignStopApplyListViewControllerSegue`.
      static let campaignStopApplyListViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, CampaignSaleDetailViewController, CampaignStopApplyListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "CampaignStopApplyListViewControllerSegue")
      
      /// Optionally returns a typed version of segue `CampaignStopApplyListViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func campaignStopApplyListViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, CampaignSaleDetailViewController, CampaignStopApplyListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.campaignSaleDetailViewController.campaignStopApplyListViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ChargePointsViewController`, and contains static references to 2 segues.
    struct chargePointsViewController {
      /// Segue identifier `ChargeDetailViewControllerSegue`.
      static let chargeDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ChargePointsViewController, ChargeDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ChargeDetailViewControllerSegue")
      /// Segue identifier `ChargePaymentSelectViewControllerSegue`.
      static let chargePaymentSelectViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ChargePointsViewController, ChargePaymentSelectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ChargePaymentSelectViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ChargeDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chargeDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ChargePointsViewController, ChargeDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.chargePointsViewController.chargeDetailViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ChargePaymentSelectViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chargePaymentSelectViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ChargePointsViewController, ChargePaymentSelectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.chargePointsViewController.chargePaymentSelectViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `FeedbackViewController`, and contains static references to 1 segues.
    struct feedbackViewController {
      /// Segue identifier `ShopProductMoveViewControllerSegue`.
      static let shopProductMoveViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, FeedbackViewController, ShopProductMoveViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopProductMoveViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ShopProductMoveViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopProductMoveViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, FeedbackViewController, ShopProductMoveViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.feedbackViewController.shopProductMoveViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MerchantCenterVerificationViewController`, and contains static references to 1 segues.
    struct merchantCenterVerificationViewController {
      /// Segue identifier `VerificationUploadExampleViewControllerSegue`.
      static let verificationUploadExampleViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterVerificationViewController, VerificationUploadExampleViewController> = Rswift.StoryboardSegueIdentifier(identifier: "VerificationUploadExampleViewControllerSegue")
      
      /// Optionally returns a typed version of segue `VerificationUploadExampleViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func verificationUploadExampleViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterVerificationViewController, VerificationUploadExampleViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterVerificationViewController.verificationUploadExampleViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MerchantCenterViewController`, and contains static references to 10 segues.
    struct merchantCenterViewController {
      /// Segue identifier `MerchantCenterInfoViewControllerSegue`.
      static let merchantCenterInfoViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MerchantCenterInfoViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MerchantCenterInfoViewControllerSegue")
      /// Segue identifier `MerchantCenterVerificationViewControllerSegue`.
      static let merchantCenterVerificationViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MerchantCenterVerificationViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MerchantCenterVerificationViewControllerSegue")
      /// Segue identifier `MyCollectViewControllerSegue`.
      static let myCollectViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyCollectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyCollectViewControllerSegue")
      /// Segue identifier `MyOrdersViewControllerSegue`.
      static let myOrdersViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyOrdersViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyOrdersViewControllerSegue")
      /// Segue identifier `MyPointsViewControllerSegue`.
      static let myPointsViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyPointsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyPointsViewControllerSegue")
      /// Segue identifier `MyShopViewControllerSegue`.
      static let myShopViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyShopViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyShopViewControllerSegue")
      /// Segue identifier `MyWalletViewControllerSegue`.
      static let myWalletViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyWalletViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MyWalletViewControllerSegue")
      /// Segue identifier `PreferentialPaySettingViewControllerSegue`.
      static let preferentialPaySettingViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, PreferentialPaySettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PreferentialPaySettingViewControllerSegue")
      /// Segue identifier `VerificationStatusViewControllerSegue`.
      static let verificationStatusViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, VerificationStatusViewController> = Rswift.StoryboardSegueIdentifier(identifier: "VerificationStatusViewControllerSegue")
      /// Segue identifier `WantCollectViewControllerSegue`.
      static let wantCollectViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MerchantCenterViewController, WantCollectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "WantCollectViewControllerSegue")
      
      /// Optionally returns a typed version of segue `MerchantCenterInfoViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func merchantCenterInfoViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MerchantCenterInfoViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.merchantCenterInfoViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MerchantCenterVerificationViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func merchantCenterVerificationViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MerchantCenterVerificationViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.merchantCenterVerificationViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyCollectViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myCollectViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyCollectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.myCollectViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyOrdersViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myOrdersViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyOrdersViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.myOrdersViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyPointsViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myPointsViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyPointsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.myPointsViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyShopViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myShopViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyShopViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.myShopViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MyWalletViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func myWalletViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, MyWalletViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.myWalletViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `PreferentialPaySettingViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func preferentialPaySettingViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, PreferentialPaySettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.preferentialPaySettingViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `VerificationStatusViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func verificationStatusViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, VerificationStatusViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.verificationStatusViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `WantCollectViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func wantCollectViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MerchantCenterViewController, WantCollectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.merchantCenterViewController.wantCollectViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyOrdersViewController`, and contains static references to 2 segues.
    struct myOrdersViewController {
      /// Segue identifier `OrderListViewControllerSegue`.
      static let orderListViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrdersViewController, OrderListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderListViewControllerSegue")
      /// Segue identifier `RefundOrderListViewControllerSegue`.
      static let refundOrderListViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyOrdersViewController, RefundOrderListViewController> = Rswift.StoryboardSegueIdentifier(identifier: "RefundOrderListViewControllerSegue")
      
      /// Optionally returns a typed version of segue `OrderListViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderListViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrdersViewController, OrderListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrdersViewController.orderListViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `RefundOrderListViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func refundOrderListViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyOrdersViewController, RefundOrderListViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myOrdersViewController.refundOrderListViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyPointsViewController`, and contains static references to 2 segues.
    struct myPointsViewController {
      /// Segue identifier `ChargePointsViewControllerSegue`.
      static let chargePointsViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyPointsViewController, ChargePointsViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ChargePointsViewControllerSegue")
      /// Segue identifier `TimeSectionSelectViewControllerSegue`.
      static let timeSectionSelectViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyPointsViewController, TimeSectionSelectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "TimeSectionSelectViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ChargePointsViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func chargePointsViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyPointsViewController, ChargePointsViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myPointsViewController.chargePointsViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `TimeSectionSelectViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func timeSectionSelectViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyPointsViewController, TimeSectionSelectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myPointsViewController.timeSectionSelectViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyShopAssistantViewController`, and contains static references to 1 segues.
    struct myShopAssistantViewController {
      /// Segue identifier `AddShopAssistantTableViewControllerSegue`.
      static let addShopAssistantTableViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyShopAssistantViewController, AddShopAssistantTableViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AddShopAssistantTableViewControllerSegue")
      
      /// Optionally returns a typed version of segue `AddShopAssistantTableViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func addShopAssistantTableViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyShopAssistantViewController, AddShopAssistantTableViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myShopAssistantViewController.addShopAssistantTableViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `MyShopViewController`, and contains static references to 4 segues.
    struct myShopViewController {
      /// Segue identifier `ShopAddressManageViewControllerSegue`.
      static let shopAddressManageViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyShopViewController, ShopAddressManageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopAddressManageViewControllerSegue")
      /// Segue identifier `ShopCategoryManageViewControllerSegue`.
      static let shopCategoryManageViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyShopViewController, ShopCategoryManageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopCategoryManageViewControllerSegue")
      /// Segue identifier `ShopCreateViewControllerSegue`.
      static let shopCreateViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyShopViewController, ShopCreateViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopCreateViewControllerSegue")
      /// Segue identifier `ShopProductManageViewControllerSegue`.
      static let shopProductManageViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, MyShopViewController, ShopProductManageViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopProductManageViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ShopAddressManageViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopAddressManageViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyShopViewController, ShopAddressManageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myShopViewController.shopAddressManageViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShopCategoryManageViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopCategoryManageViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyShopViewController, ShopCategoryManageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myShopViewController.shopCategoryManageViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShopCreateViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopCreateViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyShopViewController, ShopCreateViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myShopViewController.shopCreateViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ShopProductManageViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopProductManageViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, MyShopViewController, ShopProductManageViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.myShopViewController.shopProductManageViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderDeliveryViewController`, and contains static references to 2 segues.
    struct orderDeliveryViewController {
      /// Segue identifier `OrderDeliveryCompanyViewControllerSegue`.
      static let orderDeliveryCompanyViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDeliveryViewController, OrderDeliveryCompanyViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderDeliveryCompanyViewControllerSegue")
      /// Segue identifier `OrderDeliverySucceedViewControllerSegue`.
      static let orderDeliverySucceedViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDeliveryViewController, OrderDeliverySucceedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderDeliverySucceedViewControllerSegue")
      
      /// Optionally returns a typed version of segue `OrderDeliveryCompanyViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderDeliveryCompanyViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDeliveryViewController, OrderDeliveryCompanyViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDeliveryViewController.orderDeliveryCompanyViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `OrderDeliverySucceedViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderDeliverySucceedViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDeliveryViewController, OrderDeliverySucceedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDeliveryViewController.orderDeliverySucceedViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderDetailViewController`, and contains static references to 1 segues.
    struct orderDetailViewController {
      /// Segue identifier `OrderDeliveryViewControllerSegue`.
      static let orderDeliveryViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderDetailViewController, OrderDeliveryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderDeliveryViewControllerSegue")
      
      /// Optionally returns a typed version of segue `OrderDeliveryViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderDeliveryViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderDetailViewController, OrderDeliveryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderDetailViewController.orderDeliveryViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `OrderListViewController`, and contains static references to 2 segues.
    struct orderListViewController {
      /// Segue identifier `OrderDetailViewControllerSegue`.
      static let orderDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderListViewController, OrderDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderDetailViewControllerSegue")
      /// Segue identifier `OrderLogisticsTracksViewControllerSegue`.
      static let orderLogisticsTracksViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, OrderListViewController, OrderLogisticsTracksViewController> = Rswift.StoryboardSegueIdentifier(identifier: "OrderLogisticsTracksViewControllerSegue")
      
      /// Optionally returns a typed version of segue `OrderDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderListViewController, OrderDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderListViewController.orderDetailViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `OrderLogisticsTracksViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func orderLogisticsTracksViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, OrderListViewController, OrderLogisticsTracksViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.orderListViewController.orderLogisticsTracksViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `PayCodeSettingViewController`, and contains static references to 1 segues.
    struct payCodeSettingViewController {
      /// Segue identifier `PayCodeForgetViewControllerSegue`.
      static let payCodeForgetViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, PayCodeSettingViewController, PayCodeForgetViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PayCodeForgetViewControllerSegue")
      
      /// Optionally returns a typed version of segue `PayCodeForgetViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func payCodeForgetViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, PayCodeSettingViewController, PayCodeForgetViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.payCodeSettingViewController.payCodeForgetViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProductAddAttributeViewController`, and contains static references to 2 segues.
    struct productAddAttributeViewController {
      /// Segue identifier `ProductAddNewAttributeViewControllerSegue`.
      static let productAddNewAttributeViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddAttributeViewController, ProductAddNewAttributeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductAddNewAttributeViewControllerSegue")
      /// Segue identifier `ProductAddNewBuyNoteViewControllerSegue`.
      static let productAddNewBuyNoteViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddAttributeViewController, ProductAddNewBuyNoteViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductAddNewBuyNoteViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ProductAddNewAttributeViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productAddNewAttributeViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddAttributeViewController, ProductAddNewAttributeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddAttributeViewController.productAddNewAttributeViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductAddNewBuyNoteViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productAddNewBuyNoteViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddAttributeViewController, ProductAddNewBuyNoteViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddAttributeViewController.productAddNewBuyNoteViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProductAddNewViewController`, and contains static references to 7 segues.
    struct productAddNewViewController {
      /// Segue identifier `DetailInputViewControllerSegue`.
      static let detailInputViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, DetailInputViewController> = Rswift.StoryboardSegueIdentifier(identifier: "DetailInputViewControllerSegue")
      /// Segue identifier `ObjectReleaseSucceedViewControllerSegue`.
      static let objectReleaseSucceedViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ObjectReleaseSucceedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ObjectReleaseSucceedViewControllerSegue")
      /// Segue identifier `ProductAddAttributeViewControllerSegue`.
      static let productAddAttributeViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductAddAttributeViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductAddAttributeViewControllerSegue")
      /// Segue identifier `ProductCategoryViewControllerSegue`.
      static let productCategoryViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductCategoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductCategoryViewControllerSegue")
      /// Segue identifier `ProductSearchViewControllerSegue`.
      static let productSearchViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductSearchViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductSearchViewControllerSegue")
      /// Segue identifier `ProductSelectAddressViewControllerSegue`.
      static let productSelectAddressViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductSelectAddressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductSelectAddressViewControllerSegue")
      /// Segue identifier `ProductShopCategoryViewControllerSegue`.
      static let productShopCategoryViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductShopCategoryViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductShopCategoryViewControllerSegue")
      
      /// Optionally returns a typed version of segue `DetailInputViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func detailInputViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, DetailInputViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.detailInputViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ObjectReleaseSucceedViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func objectReleaseSucceedViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ObjectReleaseSucceedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.objectReleaseSucceedViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductAddAttributeViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productAddAttributeViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductAddAttributeViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.productAddAttributeViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductCategoryViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productCategoryViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductCategoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.productCategoryViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductSearchViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productSearchViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductSearchViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.productSearchViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductSelectAddressViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productSelectAddressViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductSelectAddressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.productSelectAddressViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductShopCategoryViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productShopCategoryViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductAddNewViewController, ProductShopCategoryViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productAddNewViewController.productShopCategoryViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProductNDetailViewController`, and contains static references to 2 segues.
    struct productNDetailViewController {
      /// Segue identifier `ProductAddNewViewControllerSegue`.
      static let productAddNewViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductNDetailViewController, ProductAddNewViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductAddNewViewControllerSegue")
      /// Segue identifier `ProductRelatedCampaignViewControllerSegue`.
      static let productRelatedCampaignViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductNDetailViewController, ProductRelatedCampaignViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductRelatedCampaignViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ProductAddNewViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productAddNewViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductNDetailViewController, ProductAddNewViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productNDetailViewController.productAddNewViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductRelatedCampaignViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productRelatedCampaignViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductNDetailViewController, ProductRelatedCampaignViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productNDetailViewController.productRelatedCampaignViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ProductSelectAddressViewController`, and contains static references to 1 segues.
    struct productSelectAddressViewController {
      /// Segue identifier `ProductAddNewAddressViewControllerSegue`.
      static let productAddNewAddressViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ProductSelectAddressViewController, ProductAddNewAddressViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductAddNewAddressViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ProductAddNewAddressViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productAddNewAddressViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ProductSelectAddressViewController, ProductAddNewAddressViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.productSelectAddressViewController.productAddNewAddressViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `RefundOrderListViewController`, and contains static references to 1 segues.
    struct refundOrderListViewController {
      /// Segue identifier `RefundOrderDetailViewControllerSegue`.
      static let refundOrderDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, RefundOrderListViewController, RefundOrderDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "RefundOrderDetailViewControllerSegue")
      
      /// Optionally returns a typed version of segue `RefundOrderDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func refundOrderDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, RefundOrderListViewController, RefundOrderDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.refundOrderListViewController.refundOrderDetailViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ResetPasswordViewController`, and contains static references to 1 segues.
    struct resetPasswordViewController {
      /// Segue identifier `resetPassNextStepSegue`.
      static let resetPassNextStepSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ResetPasswordViewController, ResetPasswordSecondStepViewController> = Rswift.StoryboardSegueIdentifier(identifier: "resetPassNextStepSegue")
      
      /// Optionally returns a typed version of segue `resetPassNextStepSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func resetPassNextStepSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ResetPasswordViewController, ResetPasswordSecondStepViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.resetPasswordViewController.resetPassNextStepSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SecurityCenterViewController`, and contains static references to 3 segues.
    struct securityCenterViewController {
      /// Segue identifier `FeedbackViewControllerSegue`.
      static let feedbackViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecurityCenterViewController, FeedbackViewController> = Rswift.StoryboardSegueIdentifier(identifier: "FeedbackViewControllerSegue")
      /// Segue identifier `MerchantCenterResetPasswordViewControllerSegue`.
      static let merchantCenterResetPasswordViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecurityCenterViewController, MerchantCenterResetPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "MerchantCenterResetPasswordViewControllerSegue")
      /// Segue identifier `PayCodeSettingViewControllerSegue`.
      static let payCodeSettingViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SecurityCenterViewController, PayCodeSettingViewController> = Rswift.StoryboardSegueIdentifier(identifier: "PayCodeSettingViewControllerSegue")
      
      /// Optionally returns a typed version of segue `FeedbackViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func feedbackViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecurityCenterViewController, FeedbackViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.securityCenterViewController.feedbackViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `MerchantCenterResetPasswordViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func merchantCenterResetPasswordViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecurityCenterViewController, MerchantCenterResetPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.securityCenterViewController.merchantCenterResetPasswordViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `PayCodeSettingViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func payCodeSettingViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SecurityCenterViewController, PayCodeSettingViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.securityCenterViewController.payCodeSettingViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SettingsViewController`, and contains static references to 1 segues.
    struct settingsViewController {
      /// Segue identifier `SecurityCenterViewControllerSegue`.
      static let securityCenterViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SettingsViewController, SecurityCenterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SecurityCenterViewControllerSegue")
      
      /// Optionally returns a typed version of segue `SecurityCenterViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func securityCenterViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SettingsViewController, SecurityCenterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.settingsViewController.securityCenterViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ShopCreateViewController`, and contains static references to 1 segues.
    struct shopCreateViewController {
      /// Segue identifier `ShopCoverSelectViewControllerSegue`.
      static let shopCoverSelectViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShopCreateViewController, ShopCoverSelectViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ShopCoverSelectViewControllerSegue")
      
      /// Optionally returns a typed version of segue `ShopCoverSelectViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func shopCoverSelectViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShopCreateViewController, ShopCoverSelectViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shopCreateViewController.shopCoverSelectViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `ShopProductManageViewController`, and contains static references to 1 segues.
    struct shopProductManageViewController {
      /// Segue identifier `ProductMoveSegue`.
      static let productMoveSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ShopProductManageViewController, ShopProductMoveViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductMoveSegue")
      
      /// Optionally returns a typed version of segue `ProductMoveSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productMoveSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ShopProductManageViewController, ShopProductMoveViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.shopProductManageViewController.productMoveSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignInHomeViewController`, and contains static references to 3 segues.
    struct signInHomeViewController {
      /// Segue identifier `ForgetPassSegue`.
      static let forgetPassSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInHomeViewController, ResetPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ForgetPassSegue")
      /// Segue identifier `SigninSegue`.
      static let signinSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInHomeViewController, SignInViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SigninSegue")
      /// Segue identifier `SignupSegue`.
      static let signupSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInHomeViewController, SignUpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SignupSegue")
      
      /// Optionally returns a typed version of segue `ForgetPassSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func forgetPassSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInHomeViewController, ResetPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInHomeViewController.forgetPassSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SigninSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signinSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInHomeViewController, SignInViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInHomeViewController.signinSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SignupSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signupSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInHomeViewController, SignUpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInHomeViewController.signupSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignInViewController`, and contains static references to 3 segues.
    struct signInViewController {
      /// Segue identifier `ForgetPassSegue`.
      static let forgetPassSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, ResetPasswordViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ForgetPassSegue")
      /// Segue identifier `SignupSegue`.
      static let signupSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, SignUpViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SignupSegue")
      /// Segue identifier `signupAgreementSegue`.
      static let signupAgreementSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignInViewController, CommonWebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "signupAgreementSegue")
      
      /// Optionally returns a typed version of segue `ForgetPassSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func forgetPassSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, ResetPasswordViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.forgetPassSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `SignupSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signupSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, SignUpViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.signupSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `signupAgreementSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signupAgreementSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignInViewController, CommonWebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signInViewController.signupAgreementSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `SignUpViewController`, and contains static references to 2 segues.
    struct signUpViewController {
      /// Segue identifier `SignUpSucceedViewControllerSegue`.
      static let signUpSucceedViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, SignUpSucceedViewController> = Rswift.StoryboardSegueIdentifier(identifier: "SignUpSucceedViewControllerSegue")
      /// Segue identifier `signupAgreementSegue`.
      static let signupAgreementSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, SignUpViewController, CommonWebViewController> = Rswift.StoryboardSegueIdentifier(identifier: "signupAgreementSegue")
      
      /// Optionally returns a typed version of segue `SignUpSucceedViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signUpSucceedViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, SignUpSucceedViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.signUpSucceedViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `signupAgreementSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func signupAgreementSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, SignUpViewController, CommonWebViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.signUpViewController.signupAgreementSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `UIViewController`, and contains static references to 4 segues.
    struct uIKitUIViewController {
      /// Segue identifier `AdAddNewViewControllerSegue`.
      static let adAddNewViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, AdAddNewViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AdAddNewViewControllerSegue")
      /// Segue identifier `AdDetailViewControllerSegue`.
      static let adDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, AdDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "AdDetailViewControllerSegue")
      /// Segue identifier `ProductFilterViewControllerSegue`.
      static let productFilterViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, ProductFilterViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductFilterViewControllerSegue")
      /// Segue identifier `ProductNDetailViewControllerSegue`.
      static let productNDetailViewControllerSegue: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, UIKit.UIViewController, ProductNDetailViewController> = Rswift.StoryboardSegueIdentifier(identifier: "ProductNDetailViewControllerSegue")
      
      /// Optionally returns a typed version of segue `AdAddNewViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func adAddNewViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, AdAddNewViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uIKitUIViewController.adAddNewViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `AdDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func adDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, AdDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uIKitUIViewController.adDetailViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductFilterViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productFilterViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, ProductFilterViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uIKitUIViewController.productFilterViewControllerSegue, segue: segue)
      }
      
      /// Optionally returns a typed version of segue `ProductNDetailViewControllerSegue`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func productNDetailViewControllerSegue(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, UIKit.UIViewController, ProductNDetailViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.uIKitUIViewController.productNDetailViewControllerSegue, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `VerifypasswordViewController`, and contains static references to 1 segues.
    struct verifypasswordViewController {
      /// Segue identifier `unwindOrderSuccessFromPay`.
      static let unwindOrderSuccessFromPay: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, VerifypasswordViewController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindOrderSuccessFromPay")
      
      /// Optionally returns a typed version of segue `unwindOrderSuccessFromPay`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindOrderSuccessFromPay(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, VerifypasswordViewController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.verifypasswordViewController.unwindOrderSuccessFromPay, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 12 storyboards.
  struct storyboard {
    /// Storyboard `AccountSession`.
    static let accountSession = _R.storyboard.accountSession()
    /// Storyboard `Ad`.
    static let ad = _R.storyboard.ad()
    /// Storyboard `Alert`.
    static let alert = _R.storyboard.alert()
    /// Storyboard `Campaign`.
    static let campaign = _R.storyboard.campaign()
    /// Storyboard `CenterSettings`.
    static let centerSettings = _R.storyboard.centerSettings()
    /// Storyboard `ClerksCenter`.
    static let clerksCenter = _R.storyboard.clerksCenter()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MerchantCenter`.
    static let merchantCenter = _R.storyboard.merchantCenter()
    /// Storyboard `Notification`.
    static let notification = _R.storyboard.notification()
    /// Storyboard `Product`.
    static let product = _R.storyboard.product()
    /// Storyboard `VerifyPayPass`.
    static let verifyPayPass = _R.storyboard.verifyPayPass()
    
    /// `UIStoryboard(name: "AccountSession", bundle: ...)`
    static func accountSession(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.accountSession)
    }
    
    /// `UIStoryboard(name: "Ad", bundle: ...)`
    static func ad(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.ad)
    }
    
    /// `UIStoryboard(name: "Alert", bundle: ...)`
    static func alert(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.alert)
    }
    
    /// `UIStoryboard(name: "Campaign", bundle: ...)`
    static func campaign(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.campaign)
    }
    
    /// `UIStoryboard(name: "CenterSettings", bundle: ...)`
    static func centerSettings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.centerSettings)
    }
    
    /// `UIStoryboard(name: "ClerksCenter", bundle: ...)`
    static func clerksCenter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.clerksCenter)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "MerchantCenter", bundle: ...)`
    static func merchantCenter(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.merchantCenter)
    }
    
    /// `UIStoryboard(name: "Notification", bundle: ...)`
    static func notification(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notification)
    }
    
    /// `UIStoryboard(name: "Product", bundle: ...)`
    static func product(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.product)
    }
    
    /// `UIStoryboard(name: "VerifyPayPass", bundle: ...)`
    static func verifyPayPass(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.verifyPayPass)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }
    
    /// This `R.string.main` struct is generated, and contains static references to 28 localization keys.
    struct main {
      /// zh-Hans translation:   切换扫码
      /// 
      /// Locales: zh-Hans
      static let di5RjFwhNormalTitle = Rswift.StringResource(key: "Di5-rj-Fwh.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:   手动输入数字码
      /// 
      /// Locales: zh-Hans
      static let wFLL1UL6NormalTitle = Rswift.StringResource(key: "wFL-L1-uL6.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation:  已认证 
      /// 
      /// Locales: zh-Hans
      static let iLQRNFL9Text = Rswift.StringResource(key: "ILQ-RN-FL9.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 200000
      /// 
      /// Locales: zh-Hans
      static let bpt2QPiFText = Rswift.StringResource(key: "bpt-2Q-piF.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 4
      /// 
      /// Locales: zh-Hans
      static let iWJT8TEcText = Rswift.StringResource(key: "iWJ-t8-TEc.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 450 
      /// 
      /// Locales: zh-Hans
      static let rcD3B0WAText = Rswift.StringResource(key: "RcD-3B-0WA.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 55 
      /// 
      /// Locales: zh-Hans
      static let jg6I4D3xText = Rswift.StringResource(key: "jg6-I4-D3x.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ANTHONY
      /// 
      /// Locales: zh-Hans
      static let r3Gl84UText = Rswift.StringResource(key: "8r3-gl-84U.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 二维码/数字码
      /// 
      /// Locales: zh-Hans
      static let rJIQnZy4Text = Rswift.StringResource(key: "RJI-Qn-Zy4.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 促销活动
      /// 
      /// Locales: zh-Hans
      static let kNr1nLNVSegmentTitles0 = Rswift.StringResource(key: "kNr-1n-LNV.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 商品
      /// 
      /// Locales: zh-Hans
      static let nRHJtSNVTitle = Rswift.StringResource(key: "nRH-Jt-sNV.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 商户中心
      /// 
      /// Locales: zh-Hans
      static let eEWCwGCuTitle = Rswift.StringResource(key: "eEW-cw-gCu.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 安全退出
      /// 
      /// Locales: zh-Hans
      static let ykmE79TMText = Rswift.StringResource(key: "ykm-e7-9TM.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 对准二维码到框内即可扫描
      /// 
      /// Locales: zh-Hans
      static let cPNtBxhText = Rswift.StringResource(key: "9CP-Nt-bxh.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 广告
      /// 
      /// Locales: zh-Hans
      static let xSCJ4SkGTitle = Rswift.StringResource(key: "xSC-J4-skG.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 广告
      /// 
      /// Locales: zh-Hans
      static let zUFJSD5TTitle = Rswift.StringResource(key: "ZUF-JS-d5T.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 待付款
      /// 
      /// Locales: zh-Hans
      static let clGDdD3PText = Rswift.StringResource(key: "clG-Dd-D3P.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 待发货
      /// 
      /// Locales: zh-Hans
      static let hIz9PX2KText = Rswift.StringResource(key: "HIz-9P-x2K.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 待退款
      /// 
      /// Locales: zh-Hans
      static let phrVc2m3Text = Rswift.StringResource(key: "Phr-Vc-2m3.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我的收入
      /// 
      /// Locales: zh-Hans
      static let rskGXH0fText = Rswift.StringResource(key: "rsk-GX-h0f.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 我的积分
      /// 
      /// Locales: zh-Hans
      static let kQD4WOaText = Rswift.StringResource(key: "9KQ-D4-wOa.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 活动
      /// 
      /// Locales: zh-Hans
      static let sBeYSEjrTitle = Rswift.StringResource(key: "SBe-YS-ejr.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans
      static let cEUMXAg0Title = Rswift.StringResource(key: "cEU-MX-ag0.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans
      static let phm9qHu3Title = Rswift.StringResource(key: "Phm-9q-hu3.title", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 现场活动
      /// 
      /// Locales: zh-Hans
      static let kNr1nLNVSegmentTitles1 = Rswift.StringResource(key: "kNr-1n-LNV.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static let eBb69ImkNormalTitle = Rswift.StringResource(key: "EBb-69-imk.normalTitle", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: 输入数字码
      /// 
      /// Locales: zh-Hans
      static let rbbBNSQzText = Rswift.StringResource(key: "Rbb-bN-SQz.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      /// zh-Hans translation: ￥20000
      /// 
      /// Locales: zh-Hans
      static let ycPCkTIPText = Rswift.StringResource(key: "YcP-Ck-TIP.text", tableName: "Main", bundle: R.hostingBundle, locales: ["zh-Hans"], comment: nil)
      
      /// zh-Hans translation:   切换扫码
      /// 
      /// Locales: zh-Hans
      static func di5RjFwhNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("Di5-rj-Fwh.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:   手动输入数字码
      /// 
      /// Locales: zh-Hans
      static func wFLL1UL6NormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("wFL-L1-uL6.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation:  已认证 
      /// 
      /// Locales: zh-Hans
      static func iLQRNFL9Text(_: Void = ()) -> String {
        return NSLocalizedString("ILQ-RN-FL9.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 200000
      /// 
      /// Locales: zh-Hans
      static func bpt2QPiFText(_: Void = ()) -> String {
        return NSLocalizedString("bpt-2Q-piF.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 4
      /// 
      /// Locales: zh-Hans
      static func iWJT8TEcText(_: Void = ()) -> String {
        return NSLocalizedString("iWJ-t8-TEc.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 450 
      /// 
      /// Locales: zh-Hans
      static func rcD3B0WAText(_: Void = ()) -> String {
        return NSLocalizedString("RcD-3B-0WA.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 55 
      /// 
      /// Locales: zh-Hans
      static func jg6I4D3xText(_: Void = ()) -> String {
        return NSLocalizedString("jg6-I4-D3x.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ANTHONY
      /// 
      /// Locales: zh-Hans
      static func r3Gl84UText(_: Void = ()) -> String {
        return NSLocalizedString("8r3-gl-84U.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 二维码/数字码
      /// 
      /// Locales: zh-Hans
      static func rJIQnZy4Text(_: Void = ()) -> String {
        return NSLocalizedString("RJI-Qn-Zy4.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 促销活动
      /// 
      /// Locales: zh-Hans
      static func kNr1nLNVSegmentTitles0(_: Void = ()) -> String {
        return NSLocalizedString("kNr-1n-LNV.segmentTitles[0]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 商品
      /// 
      /// Locales: zh-Hans
      static func nRHJtSNVTitle(_: Void = ()) -> String {
        return NSLocalizedString("nRH-Jt-sNV.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 商户中心
      /// 
      /// Locales: zh-Hans
      static func eEWCwGCuTitle(_: Void = ()) -> String {
        return NSLocalizedString("eEW-cw-gCu.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 安全退出
      /// 
      /// Locales: zh-Hans
      static func ykmE79TMText(_: Void = ()) -> String {
        return NSLocalizedString("ykm-e7-9TM.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 对准二维码到框内即可扫描
      /// 
      /// Locales: zh-Hans
      static func cPNtBxhText(_: Void = ()) -> String {
        return NSLocalizedString("9CP-Nt-bxh.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 广告
      /// 
      /// Locales: zh-Hans
      static func xSCJ4SkGTitle(_: Void = ()) -> String {
        return NSLocalizedString("xSC-J4-skG.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 广告
      /// 
      /// Locales: zh-Hans
      static func zUFJSD5TTitle(_: Void = ()) -> String {
        return NSLocalizedString("ZUF-JS-d5T.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 待付款
      /// 
      /// Locales: zh-Hans
      static func clGDdD3PText(_: Void = ()) -> String {
        return NSLocalizedString("clG-Dd-D3P.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 待发货
      /// 
      /// Locales: zh-Hans
      static func hIz9PX2KText(_: Void = ()) -> String {
        return NSLocalizedString("HIz-9P-x2K.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 待退款
      /// 
      /// Locales: zh-Hans
      static func phrVc2m3Text(_: Void = ()) -> String {
        return NSLocalizedString("Phr-Vc-2m3.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的收入
      /// 
      /// Locales: zh-Hans
      static func rskGXH0fText(_: Void = ()) -> String {
        return NSLocalizedString("rsk-GX-h0f.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 我的积分
      /// 
      /// Locales: zh-Hans
      static func kQD4WOaText(_: Void = ()) -> String {
        return NSLocalizedString("9KQ-D4-wOa.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 活动
      /// 
      /// Locales: zh-Hans
      static func sBeYSEjrTitle(_: Void = ()) -> String {
        return NSLocalizedString("SBe-YS-ejr.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans
      static func cEUMXAg0Title(_: Void = ()) -> String {
        return NSLocalizedString("cEU-MX-ag0.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 消息
      /// 
      /// Locales: zh-Hans
      static func phm9qHu3Title(_: Void = ()) -> String {
        return NSLocalizedString("Phm-9q-hu3.title", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 现场活动
      /// 
      /// Locales: zh-Hans
      static func kNr1nLNVSegmentTitles1(_: Void = ()) -> String {
        return NSLocalizedString("kNr-1n-LNV.segmentTitles[1]", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 确定
      /// 
      /// Locales: zh-Hans
      static func eBb69ImkNormalTitle(_: Void = ()) -> String {
        return NSLocalizedString("EBb-69-imk.normalTitle", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: 输入数字码
      /// 
      /// Locales: zh-Hans
      static func rbbBNSQzText(_: Void = ()) -> String {
        return NSLocalizedString("Rbb-bN-SQz.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      /// zh-Hans translation: ￥20000
      /// 
      /// Locales: zh-Hans
      static func ycPCkTIPText(_: Void = ()) -> String {
        return NSLocalizedString("YcP-Ck-TIP.text", tableName: "Main", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ObjectAttributeTableViewCell.validate()
      try _ProductDetailPhotoTableViewCell.validate()
      try _ShopCategoryTableViewCell.validate()
      try _BankAccountInfoTableViewCell.validate()
      try _ProductCategoryTableViewCell.validate()
      try _OrderHeaderTableViewCell.validate()
      try _TimeSelectViewController.validate()
      try _MyShopProductManageTableViewCell.validate()
      try _EditStaffContentView.validate()
      try _InputView.validate()
      try _BuyNoteAttributeTableViewCell.validate()
      try _CouponRuleTableViewCell.validate()
      try _DiscountTableViewCell.validate()
      try _ShopAssistantTableViewCell.validate()
      try _AdAddAnswerTableViewCell.validate()
      try _AddShopAssistantContentView.validate()
      try _OrderAddressDetailTableViewCell.validate()
      try _CampaginChooseItemCell.validate()
      try _ReduceTableViewCell.validate()
      try _ProductChoosecodeCell.validate()
      try _SetItemCatTableViewCell.validate()
      try _RuleChooseView.validate()
      try _AddPhotoViewController.validate()
      try _CampaignTableViewCell.validate()
      try _ShopInfoAttributeTableViewCell.validate()
      try _MyShopAssistantDefaultView.validate()
      try _RuleTableViewCell.validate()
      try _ItemManageTableViewCell.validate()
      try _MyShopProductCategoryEditTableViewCell.validate()
    }
    
    struct _AdAddAnswerTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AdAddAnswerTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AdAddAnswerTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdAddAnswerTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'AdAddAnswerTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemDisclosure") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDisclosure' is used in nib 'AdAddAnswerTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemWrong") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemWrong' is used in nib 'AdAddAnswerTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AdTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "AdTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AdTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AdTableViewCell
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AdTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? AdTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _AddPhotoViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddPhotoViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonBgLightGray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBgLightGray' is used in nib 'AddPhotoViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _AddShopAssistantContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "AddShopAssistantContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> AddShopAssistantContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AddShopAssistantContentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_choice_yes") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_choice_yes' is used in nib 'AddShopAssistantContentView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_help") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_help' is used in nib 'AddShopAssistantContentView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BankAccountInfoTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BankAccountInfoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BankAccountInfoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BankAccountInfoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'BankAccountInfoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _BuyNoteAttributeTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "BuyNoteAttributeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> BuyNoteAttributeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BuyNoteAttributeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDelete' is used in nib 'BuyNoteAttributeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CampaginChooseItemCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CampaginChooseItemCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CampaginChooseItemCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaginChooseItemCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in nib 'CampaginChooseItemCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CampaignTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CampaignTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CampaignTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CampaignTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CampaignTagStop") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CampaignTagStop' is used in nib 'CampaignTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _CenterTxtFieldTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CenterTxtFieldTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CenterTxtFieldTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CenterTxtFieldTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _CouponRuleTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CouponRuleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CouponRuleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CouponRuleTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDelete' is used in nib 'CouponRuleTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DefaultTxtTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DefaultTxtTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DefaultTxtTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DefaultTxtTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _DiscountTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = DiscountTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "DiscountTableViewCell"
      let name = "DiscountTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DiscountTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DiscountTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in nib 'DiscountTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg1' is used in nib 'DiscountTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _DoMoreFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DoMoreFooterTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> DoMoreFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? DoMoreFooterTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _EditStaffContentView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "EditStaffContentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditStaffContentView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditStaffContentView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_help") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_help' is used in nib 'EditStaffContentView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _InputView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "InputView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InputView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InputView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_delete2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_delete2' is used in nib 'InputView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ItemDetailTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ItemDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemDetailTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ItemManageTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ItemManageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ItemManageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ItemManageTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "item_modify") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'item_modify' is used in nib 'ItemManageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_right9") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_right9' is used in nib 'ItemManageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmark") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmark' is used in nib 'ItemManageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDelete' is used in nib 'ItemManageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in nib 'ItemManageTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ModifyItemSpecTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ModifyItemSpecTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ModifyItemSpecTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ModifyItemSpecTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyCollectTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = MyCollectTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "MyCollectTableViewCell"
      let name = "MyCollectTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyCollectTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyCollectTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyShopAssistantDefaultView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyShopAssistantDefaultView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyShopAssistantDefaultView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShopAssistantDefaultView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_no_shop_assistant") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_no_shop_assistant' is used in nib 'MyShopAssistantDefaultView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyShopProductCategoryEditTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyShopProductCategoryEditTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyShopProductCategoryEditTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShopProductCategoryEditTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "MyShopCategoryButtonStickOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MyShopCategoryButtonStickOn' is used in nib 'MyShopProductCategoryEditTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MyShopCategoryButtonDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MyShopCategoryButtonDelete' is used in nib 'MyShopProductCategoryEditTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MyShopCategoryButtonEdit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MyShopCategoryButtonEdit' is used in nib 'MyShopProductCategoryEditTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'MyShopProductCategoryEditTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MyShopCategoryButtonStickOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MyShopCategoryButtonStickOff' is used in nib 'MyShopProductCategoryEditTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _MyShopProductCategoryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyShopProductCategoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyShopProductCategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShopProductCategoryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyShopProductDefaultCategoryCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MyShopProductDefaultCategoryCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyShopProductDefaultCategoryCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShopProductDefaultCategoryCell
      }
      
      fileprivate init() {}
    }
    
    struct _MyShopProductManageTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "MyShopProductManageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> MyShopProductManageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? MyShopProductManageTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOff' is used in nib 'MyShopProductManageTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'MyShopProductManageTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NoneReduceView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NoneReduceView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NoneReduceView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NoneReduceView
      }
      
      fileprivate init() {}
    }
    
    struct _NormalDescTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NormalDescTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NormalDescTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NormalDescTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _NotificationTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NotificationTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> NotificationTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? NotificationTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ObjectAttributeTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ObjectAttributeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ObjectAttributeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ObjectAttributeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDelete' is used in nib 'ObjectAttributeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderAddressDetailTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderAddressDetailTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderAddressDetailTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderAddressDetailTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "OrderIconAddress") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'OrderIconAddress' is used in nib 'OrderAddressDetailTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDeliveryTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDeliveryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderDeliveryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDeliveryTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderDescTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderDescTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderDescTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderDescTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderFooterTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderFooterTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderHeaderTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "OrderHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderHeaderTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemOperation") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemOperation' is used in nib 'OrderHeaderTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OrderLogisticsTracksTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderLogisticsTracksTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderLogisticsTracksTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderLogisticsTracksTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderProductDescTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderProductDescTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderProductDescTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderProductDescTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSimpleFooterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSimpleFooterTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderSimpleFooterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSimpleFooterTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _OrderSimpleHeaderTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OrderSimpleHeaderTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OrderSimpleHeaderTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OrderSimpleHeaderTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PayTextFieldTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = PayTextFieldTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "PayTextFieldTableViewCell"
      let name = "PayTextFieldTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PayTextFieldTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PayTextFieldTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoDetailViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ProductCategoryTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductCategoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProductCategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductCategoryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOff' is used in nib 'ProductCategoryTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'ProductCategoryTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProductChoosecodeCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductChoosecodeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProductChoosecodeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductChoosecodeCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in nib 'ProductChoosecodeCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProductDetailPhotoTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ProductDetailPhotoTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProductDetailPhotoTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductDetailPhotoTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in nib 'ProductDetailPhotoTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProductStockTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductStockTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProductStockTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductStockTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ProductTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ProductTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProductTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProductTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _QrCodeCoverView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QrCodeCoverView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> QrCodeCoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? QrCodeCoverView
      }
      
      fileprivate init() {}
    }
    
    struct _ReduceTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ReduceTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ReduceTableViewCell"
      let name = "ReduceTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ReduceTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ReduceTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in nib 'ReduceTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg1' is used in nib 'ReduceTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RefundImgageTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = RefundImgageTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RefundImgageTableViewCell"
      let name = "RefundImgageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RefundImgageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RefundImgageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RightImageTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RightImageTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RightImageTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightImageTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RightTxtFieldTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "RightTxtFieldTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RightTxtFieldTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RightTxtFieldTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _RuleChooseView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RuleChooseView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RuleChooseView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RuleChooseView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bg3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg3' is used in nib 'RuleChooseView', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_right9") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_right9' is used in nib 'RuleChooseView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _RuleTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = RuleTableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "RuleTableViewCell"
      let name = "RuleTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> RuleTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? RuleTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bg1-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg1-1' is used in nib 'RuleTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_right9") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_right9' is used in nib 'RuleTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg' is used in nib 'RuleTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in nib 'RuleTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SetItemCatTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SetItemCatTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SetItemCatTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetItemCatTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in nib 'SetItemCatTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SetItemCodeTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SetItemCodeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SetItemCodeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetItemCodeTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SetProductSpecTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SetProductSpecTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SetProductSpecTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SetProductSpecTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _SettingCoverView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingCoverView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingCoverView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCoverView
      }
      
      fileprivate init() {}
    }
    
    struct _ShopAssistantTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShopAssistantTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopAssistantTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopAssistantTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "ico_phone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_phone' is used in nib 'ShopAssistantTableViewCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_time") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_time' is used in nib 'ShopAssistantTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShopCategoryTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShopCategoryTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopCategoryTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopCategoryTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in nib 'ShopCategoryTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShopInfoAttributeTableViewCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ShopInfoAttributeTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShopInfoAttributeTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShopInfoAttributeTableViewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemDelete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemDelete' is used in nib 'ShopInfoAttributeTableViewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ShowDatePickerView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ShowDatePickerView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ShowDatePickerView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ShowDatePickerView
      }
      
      fileprivate init() {}
    }
    
    struct _StatusView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "StatusView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> StatusView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? StatusView
      }
      
      fileprivate init() {}
    }
    
    struct _TextCounterTableViewCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TextCounterTableViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TextCounterTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TextCounterTableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _TimeSelectViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TimeSelectViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in nib 'TimeSelectViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TimeSelectLeftArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TimeSelectLeftArrow' is used in nib 'TimeSelectViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TimeSelectRightArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TimeSelectRightArrow' is used in nib 'TimeSelectViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _VerifiCodeCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "VerifiCodeCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> VerifiCodeCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? VerifiCodeCell
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try verifyPayPass.validate()
      try ad.validate()
      try centerSettings.validate()
      try merchantCenter.validate()
      try clerksCenter.validate()
      try campaign.validate()
      try accountSession.validate()
      try notification.validate()
      try product.validate()
      try launchScreen.validate()
    }
    
    struct accountSession: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let commonWebViewScene = StoryboardViewControllerResource<CommonWebViewController>(identifier: "CommonWebViewScene")
      let name = "AccountSession"
      let signUpSucceed = StoryboardViewControllerResource<SignUpSucceedViewController>(identifier: "SignUpSucceed")
      
      func commonWebViewScene(_: Void = ()) -> CommonWebViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: commonWebViewScene)
      }
      
      func signUpSucceed(_: Void = ()) -> SignUpSucceedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpSucceed)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CellItemCheckmarkOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOff' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPasswordLock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPasswordLock' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconUser") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconUser' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninBtnEyeOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBtnEyeOn' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MerchantCenterVerificationSuccess") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MerchantCenterVerificationSuccess' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconVerificationCode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconVerificationCode' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBg' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninBtnEyeOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBtnEyeOff' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPassword") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPassword' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPhone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPhone' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPayPassword") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPayPassword' is used in storyboard 'AccountSession', but couldn't be loaded.") }
        if _R.storyboard.accountSession().commonWebViewScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'commonWebViewScene' could not be loaded from storyboard 'AccountSession' as 'CommonWebViewController'.") }
        if _R.storyboard.accountSession().signUpSucceed() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpSucceed' could not be loaded from storyboard 'AccountSession' as 'SignUpSucceedViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct ad: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let adAddMovie = StoryboardViewControllerResource<AdAddMovieViewController>(identifier: "AdAddMovie")
      let adAddNew = StoryboardViewControllerResource<AdAddNewViewController>(identifier: "AdAddNew")
      let adDetail = StoryboardViewControllerResource<AdDetailViewController>(identifier: "AdDetail")
      let adHomeViewControllerScene = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "AdHomeViewControllerScene")
      let adNavScene = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "AdNavScene")
      let adQuestionDetail = StoryboardViewControllerResource<AdQuestionDetailViewController>(identifier: "AdQuestionDetail")
      let bundle = R.hostingBundle
      let name = "Ad"
      
      func adAddMovie(_: Void = ()) -> AdAddMovieViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adAddMovie)
      }
      
      func adAddNew(_: Void = ()) -> AdAddNewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adAddNew)
      }
      
      func adDetail(_: Void = ()) -> AdDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adDetail)
      }
      
      func adHomeViewControllerScene(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adHomeViewControllerScene)
      }
      
      func adNavScene(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adNavScene)
      }
      
      func adQuestionDetail(_: Void = ()) -> AdQuestionDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: adQuestionDetail)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TabOn3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn3' is used in storyboard 'Ad', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBgLightGray") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBgLightGray' is used in storyboard 'Ad', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff3' is used in storyboard 'Ad', but couldn't be loaded.") }
        if _R.storyboard.ad().adNavScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adNavScene' could not be loaded from storyboard 'Ad' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.ad().adAddNew() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adAddNew' could not be loaded from storyboard 'Ad' as 'AdAddNewViewController'.") }
        if _R.storyboard.ad().adDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adDetail' could not be loaded from storyboard 'Ad' as 'AdDetailViewController'.") }
        if _R.storyboard.ad().adHomeViewControllerScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adHomeViewControllerScene' could not be loaded from storyboard 'Ad' as 'UIKit.UIViewController'.") }
        if _R.storyboard.ad().adAddMovie() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adAddMovie' could not be loaded from storyboard 'Ad' as 'AdAddMovieViewController'.") }
        if _R.storyboard.ad().adQuestionDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'adQuestionDetail' could not be loaded from storyboard 'Ad' as 'AdQuestionDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct alert: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = AlertViewController
      
      let bundle = R.hostingBundle
      let name = "Alert"
      
      fileprivate init() {}
    }
    
    struct campaign: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let addNewPlace = StoryboardViewControllerResource<CampaignAddNewPlaceViewController>(identifier: "AddNewPlace")
      let addNewSale = StoryboardViewControllerResource<CampaignAddNewSaleViewController>(identifier: "AddNewSale")
      let bundle = R.hostingBundle
      let campaignAddNewCouponRule = StoryboardViewControllerResource<CampaignAddNewCouponRuleViewController>(identifier: "CampaignAddNewCouponRule")
      let campaignAddRelatedProducts = StoryboardViewControllerResource<CampaignAddRelatedProductsViewController>(identifier: "CampaignAddRelatedProducts")
      let campaignHomeViewControllerScene = StoryboardViewControllerResource<CampaignHomeViewController>(identifier: "CampaignHomeViewControllerScene")
      let campaignNavScene = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "CampaignNavScene")
      let campaignParticipator = StoryboardViewControllerResource<CampaignParticipatorViewController>(identifier: "CampaignParticipator")
      let campaignPlaceDetail = StoryboardViewControllerResource<CampaignPlaceDetailViewController>(identifier: "CampaignPlaceDetail")
      let campaignProductFilter = StoryboardViewControllerResource<CampaignProductFilterViewController>(identifier: "CampaignProductFilter")
      let campaignSaleDetail = StoryboardViewControllerResource<CampaignSaleDetailViewController>(identifier: "CampaignSaleDetail")
      let campaignStopApplyList = StoryboardViewControllerResource<CampaignStopApplyListViewController>(identifier: "CampaignStopApplyList")
      let name = "Campaign"
      
      func addNewPlace(_: Void = ()) -> CampaignAddNewPlaceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewPlace)
      }
      
      func addNewSale(_: Void = ()) -> CampaignAddNewSaleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewSale)
      }
      
      func campaignAddNewCouponRule(_: Void = ()) -> CampaignAddNewCouponRuleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignAddNewCouponRule)
      }
      
      func campaignAddRelatedProducts(_: Void = ()) -> CampaignAddRelatedProductsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignAddRelatedProducts)
      }
      
      func campaignHomeViewControllerScene(_: Void = ()) -> CampaignHomeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignHomeViewControllerScene)
      }
      
      func campaignNavScene(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignNavScene)
      }
      
      func campaignParticipator(_: Void = ()) -> CampaignParticipatorViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignParticipator)
      }
      
      func campaignPlaceDetail(_: Void = ()) -> CampaignPlaceDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignPlaceDetail)
      }
      
      func campaignProductFilter(_: Void = ()) -> CampaignProductFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignProductFilter)
      }
      
      func campaignSaleDetail(_: Void = ()) -> CampaignSaleDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignSaleDetail)
      }
      
      func campaignStopApplyList(_: Void = ()) -> CampaignStopApplyListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: campaignStopApplyList)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if UIKit.UIImage(named: "PlaceHolderUserPortrait") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'PlaceHolderUserPortrait' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOff' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn2' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if UIKit.UIImage(named: "下一步") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named '下一步' is used in storyboard 'Campaign', but couldn't be loaded.") }
        if _R.storyboard.campaign().campaignStopApplyList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignStopApplyList' could not be loaded from storyboard 'Campaign' as 'CampaignStopApplyListViewController'.") }
        if _R.storyboard.campaign().campaignProductFilter() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignProductFilter' could not be loaded from storyboard 'Campaign' as 'CampaignProductFilterViewController'.") }
        if _R.storyboard.campaign().campaignAddNewCouponRule() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignAddNewCouponRule' could not be loaded from storyboard 'Campaign' as 'CampaignAddNewCouponRuleViewController'.") }
        if _R.storyboard.campaign().campaignPlaceDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignPlaceDetail' could not be loaded from storyboard 'Campaign' as 'CampaignPlaceDetailViewController'.") }
        if _R.storyboard.campaign().addNewPlace() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewPlace' could not be loaded from storyboard 'Campaign' as 'CampaignAddNewPlaceViewController'.") }
        if _R.storyboard.campaign().addNewSale() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewSale' could not be loaded from storyboard 'Campaign' as 'CampaignAddNewSaleViewController'.") }
        if _R.storyboard.campaign().campaignHomeViewControllerScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignHomeViewControllerScene' could not be loaded from storyboard 'Campaign' as 'CampaignHomeViewController'.") }
        if _R.storyboard.campaign().campaignSaleDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignSaleDetail' could not be loaded from storyboard 'Campaign' as 'CampaignSaleDetailViewController'.") }
        if _R.storyboard.campaign().campaignParticipator() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignParticipator' could not be loaded from storyboard 'Campaign' as 'CampaignParticipatorViewController'.") }
        if _R.storyboard.campaign().campaignNavScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignNavScene' could not be loaded from storyboard 'Campaign' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.campaign().campaignAddRelatedProducts() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'campaignAddRelatedProducts' could not be loaded from storyboard 'Campaign' as 'CampaignAddRelatedProductsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct centerSettings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let feedback = StoryboardViewControllerResource<FeedbackViewController>(identifier: "Feedback")
      let name = "CenterSettings"
      let payCodeForget = StoryboardViewControllerResource<PayCodeForgetViewController>(identifier: "PayCodeForget")
      let payCodeSetting = StoryboardViewControllerResource<PayCodeSettingViewController>(identifier: "PayCodeSetting")
      let resetPassword = StoryboardViewControllerResource<MerchantCenterResetPasswordViewController>(identifier: "ResetPassword")
      let securityCenter = StoryboardViewControllerResource<SecurityCenterViewController>(identifier: "SecurityCenter")
      let settings = StoryboardViewControllerResource<SettingsViewController>(identifier: "Settings")
      let shopProductMove = StoryboardViewControllerResource<ShopProductMoveViewController>(identifier: "ShopProductMove")
      
      func feedback(_: Void = ()) -> FeedbackViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: feedback)
      }
      
      func payCodeForget(_: Void = ()) -> PayCodeForgetViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payCodeForget)
      }
      
      func payCodeSetting(_: Void = ()) -> PayCodeSettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: payCodeSetting)
      }
      
      func resetPassword(_: Void = ()) -> MerchantCenterResetPasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: resetPassword)
      }
      
      func securityCenter(_: Void = ()) -> SecurityCenterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: securityCenter)
      }
      
      func settings(_: Void = ()) -> SettingsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settings)
      }
      
      func shopProductMove(_: Void = ()) -> ShopProductMoveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopProductMove)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "SigninBtnEyeOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBtnEyeOff' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPassword") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPassword' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPasswordLock") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPasswordLock' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninBtnEyeOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBtnEyeOn' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconPhone") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconPhone' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if UIKit.UIImage(named: "SigninIconVerificationCode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninIconVerificationCode' is used in storyboard 'CenterSettings', but couldn't be loaded.") }
        if _R.storyboard.centerSettings().payCodeForget() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payCodeForget' could not be loaded from storyboard 'CenterSettings' as 'PayCodeForgetViewController'.") }
        if _R.storyboard.centerSettings().securityCenter() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'securityCenter' could not be loaded from storyboard 'CenterSettings' as 'SecurityCenterViewController'.") }
        if _R.storyboard.centerSettings().settings() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settings' could not be loaded from storyboard 'CenterSettings' as 'SettingsViewController'.") }
        if _R.storyboard.centerSettings().resetPassword() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'resetPassword' could not be loaded from storyboard 'CenterSettings' as 'MerchantCenterResetPasswordViewController'.") }
        if _R.storyboard.centerSettings().payCodeSetting() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'payCodeSetting' could not be loaded from storyboard 'CenterSettings' as 'PayCodeSettingViewController'.") }
        if _R.storyboard.centerSettings().feedback() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'feedback' could not be loaded from storyboard 'CenterSettings' as 'FeedbackViewController'.") }
        if _R.storyboard.centerSettings().shopProductMove() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopProductMove' could not be loaded from storyboard 'CenterSettings' as 'ShopProductMoveViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct clerksCenter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "ClerksCenter"
      
      static func validate() throws {
        if UIKit.UIImage(named: "TableIconCollect") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TableIconCollect' is used in storyboard 'ClerksCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TableIconRecord") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TableIconRecord' is used in storyboard 'ClerksCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_modify_password") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_modify_password' is used in storyboard 'ClerksCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TableIconReceiveOrder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TableIconReceiveOrder' is used in storyboard 'ClerksCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TableIconScanCode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TableIconScanCode' is used in storyboard 'ClerksCenter', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "SigninBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'SigninBg' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabBarController
      
      let addNewObject = StoryboardViewControllerResource<AddNewObjectViewController>(identifier: "AddNewObject")
      let bundle = R.hostingBundle
      let manuallyInputQR = StoryboardViewControllerResource<ManuallyInputQRViewController>(identifier: "ManuallyInputQR")
      let name = "Main"
      let scanQR = StoryboardViewControllerResource<QRViewController>(identifier: "ScanQR")
      
      func addNewObject(_: Void = ()) -> AddNewObjectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addNewObject)
      }
      
      func manuallyInputQR(_: Void = ()) -> ManuallyInputQRViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: manuallyInputQR)
      }
      
      func scanQR(_: Void = ()) -> QRViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: scanQR)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BtnPublishOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BtnPublishOff' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonTransparentBlackBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonTransparentBlackBg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NaviIconFilter") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NaviIconFilter' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QRCodeInputBorder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QRCodeInputBorder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CenterOrderStatusComplete") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CenterOrderStatusComplete' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "QRCodeBorder") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'QRCodeBorder' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff2' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn1' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "NaviIconQRCode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'NaviIconQRCode' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CenterOrderStatusDelivery") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CenterOrderStatusDelivery' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBackButton") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBackButton' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn3' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn5") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonIconBarcode") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonIconBarcode' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff5") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff5' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CenterOrderStatusUnpaid") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CenterOrderStatusUnpaid' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff4' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeaderRightWhiteArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightWhiteArrow' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn2") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn2' is used in storyboard 'Main', but couldn't be loaded.") }
        if _R.storyboard.main().addNewObject() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addNewObject' could not be loaded from storyboard 'Main' as 'AddNewObjectViewController'.") }
        if _R.storyboard.main().scanQR() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'scanQR' could not be loaded from storyboard 'Main' as 'QRViewController'.") }
        if _R.storyboard.main().manuallyInputQR() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'manuallyInputQR' could not be loaded from storyboard 'Main' as 'ManuallyInputQRViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct merchantCenter: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let addDiscount = StoryboardViewControllerResource<AddDiscountViewController>(identifier: "AddDiscount")
      let addReduce = StoryboardViewControllerResource<AddReduceViewController>(identifier: "AddReduce")
      let addShopAssistantTableViewController = StoryboardViewControllerResource<AddShopAssistantTableViewController>(identifier: "AddShopAssistantTableViewController")
      let bundle = R.hostingBundle
      let chargeDetail = StoryboardViewControllerResource<ChargeDetailViewController>(identifier: "ChargeDetail")
      let chargePaymentSelect = StoryboardViewControllerResource<ChargePaymentSelectViewController>(identifier: "ChargePaymentSelect")
      let chargePoints = StoryboardViewControllerResource<ChargePointsViewController>(identifier: "ChargePoints")
      let itemManageViewController = StoryboardViewControllerResource<ItemManageViewController>(identifier: "ItemManageViewController")
      let merchantCenterInfo = StoryboardViewControllerResource<MerchantCenterInfoViewController>(identifier: "MerchantCenterInfo")
      let merchantCenterNavScene = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "MerchantCenterNavScene")
      let merchantCenterVerification = StoryboardViewControllerResource<MerchantCenterVerificationViewController>(identifier: "MerchantCenterVerification")
      let merchantCenterViewControllerScene = StoryboardViewControllerResource<MerchantCenterViewController>(identifier: "MerchantCenterViewControllerScene")
      let myCollect = StoryboardViewControllerResource<MyCollectViewController>(identifier: "MyCollect")
      let myOrders = StoryboardViewControllerResource<MyOrdersViewController>(identifier: "MyOrders")
      let myPoints = StoryboardViewControllerResource<MyPointsViewController>(identifier: "MyPoints")
      let myShop = StoryboardViewControllerResource<MyShopViewController>(identifier: "MyShop")
      let myShopAssistantViewController = StoryboardViewControllerResource<MyShopAssistantViewController>(identifier: "MyShopAssistantViewController")
      let myWallet = StoryboardViewControllerResource<MyWalletViewController>(identifier: "MyWallet")
      let name = "MerchantCenter"
      let orderDelivery = StoryboardViewControllerResource<OrderDeliveryViewController>(identifier: "OrderDelivery")
      let orderDeliveryCompany = StoryboardViewControllerResource<OrderDeliveryCompanyViewController>(identifier: "OrderDeliveryCompany")
      let orderDeliverySucceed = StoryboardViewControllerResource<OrderDeliverySucceedViewController>(identifier: "OrderDeliverySucceed")
      let orderDetail = StoryboardViewControllerResource<OrderDetailViewController>(identifier: "OrderDetail")
      let orderList = StoryboardViewControllerResource<OrderListViewController>(identifier: "OrderList")
      let orderLogisticsTracks = StoryboardViewControllerResource<OrderLogisticsTracksViewController>(identifier: "OrderLogisticsTracks")
      let prefrentialPay = StoryboardViewControllerResource<PreferentialPaySettingViewController>(identifier: "PrefrentialPay")
      let refundOrderDetail = StoryboardViewControllerResource<RefundOrderDetailViewController>(identifier: "RefundOrderDetail")
      let refundOrderList = StoryboardViewControllerResource<RefundOrderListViewController>(identifier: "RefundOrderList")
      let saleCoupon = StoryboardViewControllerResource<SaleCouponViewController>(identifier: "SaleCoupon")
      let shopAddressManage = StoryboardViewControllerResource<ShopAddressManageViewController>(identifier: "ShopAddressManage")
      let shopCategoryManage = StoryboardViewControllerResource<ShopCategoryManageViewController>(identifier: "ShopCategoryManage")
      let shopCoverSelect = StoryboardViewControllerResource<ShopCoverSelectViewController>(identifier: "ShopCoverSelect")
      let shopCreate = StoryboardViewControllerResource<ShopCreateViewController>(identifier: "ShopCreate")
      let shopProductManage = StoryboardViewControllerResource<ShopProductManageViewController>(identifier: "ShopProductManage")
      let shopProductMove = StoryboardViewControllerResource<ShopProductMoveViewController>(identifier: "ShopProductMove")
      let timeSectionSelect = StoryboardViewControllerResource<TimeSectionSelectViewController>(identifier: "TimeSectionSelect")
      let verificationStatus = StoryboardViewControllerResource<VerificationStatusViewController>(identifier: "VerificationStatus")
      let verificationUploadExample = StoryboardViewControllerResource<VerificationUploadExampleViewController>(identifier: "VerificationUploadExample")
      let wantCollect = StoryboardViewControllerResource<WantCollectViewController>(identifier: "WantCollect")
      
      func addDiscount(_: Void = ()) -> AddDiscountViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addDiscount)
      }
      
      func addReduce(_: Void = ()) -> AddReduceViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addReduce)
      }
      
      func addShopAssistantTableViewController(_: Void = ()) -> AddShopAssistantTableViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: addShopAssistantTableViewController)
      }
      
      func chargeDetail(_: Void = ()) -> ChargeDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chargeDetail)
      }
      
      func chargePaymentSelect(_: Void = ()) -> ChargePaymentSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chargePaymentSelect)
      }
      
      func chargePoints(_: Void = ()) -> ChargePointsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: chargePoints)
      }
      
      func itemManageViewController(_: Void = ()) -> ItemManageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: itemManageViewController)
      }
      
      func merchantCenterInfo(_: Void = ()) -> MerchantCenterInfoViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: merchantCenterInfo)
      }
      
      func merchantCenterNavScene(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: merchantCenterNavScene)
      }
      
      func merchantCenterVerification(_: Void = ()) -> MerchantCenterVerificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: merchantCenterVerification)
      }
      
      func merchantCenterViewControllerScene(_: Void = ()) -> MerchantCenterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: merchantCenterViewControllerScene)
      }
      
      func myCollect(_: Void = ()) -> MyCollectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myCollect)
      }
      
      func myOrders(_: Void = ()) -> MyOrdersViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myOrders)
      }
      
      func myPoints(_: Void = ()) -> MyPointsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myPoints)
      }
      
      func myShop(_: Void = ()) -> MyShopViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myShop)
      }
      
      func myShopAssistantViewController(_: Void = ()) -> MyShopAssistantViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myShopAssistantViewController)
      }
      
      func myWallet(_: Void = ()) -> MyWalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: myWallet)
      }
      
      func orderDelivery(_: Void = ()) -> OrderDeliveryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDelivery)
      }
      
      func orderDeliveryCompany(_: Void = ()) -> OrderDeliveryCompanyViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDeliveryCompany)
      }
      
      func orderDeliverySucceed(_: Void = ()) -> OrderDeliverySucceedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDeliverySucceed)
      }
      
      func orderDetail(_: Void = ()) -> OrderDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderDetail)
      }
      
      func orderList(_: Void = ()) -> OrderListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderList)
      }
      
      func orderLogisticsTracks(_: Void = ()) -> OrderLogisticsTracksViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: orderLogisticsTracks)
      }
      
      func prefrentialPay(_: Void = ()) -> PreferentialPaySettingViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: prefrentialPay)
      }
      
      func refundOrderDetail(_: Void = ()) -> RefundOrderDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundOrderDetail)
      }
      
      func refundOrderList(_: Void = ()) -> RefundOrderListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: refundOrderList)
      }
      
      func saleCoupon(_: Void = ()) -> SaleCouponViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: saleCoupon)
      }
      
      func shopAddressManage(_: Void = ()) -> ShopAddressManageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopAddressManage)
      }
      
      func shopCategoryManage(_: Void = ()) -> ShopCategoryManageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopCategoryManage)
      }
      
      func shopCoverSelect(_: Void = ()) -> ShopCoverSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopCoverSelect)
      }
      
      func shopCreate(_: Void = ()) -> ShopCreateViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopCreate)
      }
      
      func shopProductManage(_: Void = ()) -> ShopProductManageViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopProductManage)
      }
      
      func shopProductMove(_: Void = ()) -> ShopProductMoveViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopProductMove)
      }
      
      func timeSectionSelect(_: Void = ()) -> TimeSectionSelectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: timeSectionSelect)
      }
      
      func verificationStatus(_: Void = ()) -> VerificationStatusViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verificationStatus)
      }
      
      func verificationUploadExample(_: Void = ()) -> VerificationUploadExampleViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verificationUploadExample)
      }
      
      func wantCollect(_: Void = ()) -> WantCollectViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wantCollect)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_bg1-1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg1-1' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LicenseVerifyStatusSuccess") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LicenseVerifyStatusSuccess' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonIconAddImage") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonIconAddImage' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LicenseVerifyStatusAudit") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LicenseVerifyStatusAudit' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn5") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn5' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MerchantCenterVerificationSuccess") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MerchantCenterVerificationSuccess' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_activity") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_right") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_right' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CoverAddBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CoverAddBg' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "line") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'line' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CoverButtonSelected") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CoverButtonSelected' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TimeSelectDownArrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TimeSelectDownArrow' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MerchantCenterVerificationExample") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MerchantCenterVerificationExample' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_bg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_bg' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff5") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff5' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonButtonAdd") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonButtonAdd' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "LicenseVerifyStatusFailed") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LicenseVerifyStatusFailed' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CommonGrayBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonGrayBg' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if UIKit.UIImage(named: "HeaderRightarrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'HeaderRightarrow' is used in storyboard 'MerchantCenter', but couldn't be loaded.") }
        if _R.storyboard.merchantCenter().shopCategoryManage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopCategoryManage' could not be loaded from storyboard 'MerchantCenter' as 'ShopCategoryManageViewController'.") }
        if _R.storyboard.merchantCenter().itemManageViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'itemManageViewController' could not be loaded from storyboard 'MerchantCenter' as 'ItemManageViewController'.") }
        if _R.storyboard.merchantCenter().orderDelivery() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDelivery' could not be loaded from storyboard 'MerchantCenter' as 'OrderDeliveryViewController'.") }
        if _R.storyboard.merchantCenter().verificationStatus() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verificationStatus' could not be loaded from storyboard 'MerchantCenter' as 'VerificationStatusViewController'.") }
        if _R.storyboard.merchantCenter().shopProductMove() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopProductMove' could not be loaded from storyboard 'MerchantCenter' as 'ShopProductMoveViewController'.") }
        if _R.storyboard.merchantCenter().verificationUploadExample() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verificationUploadExample' could not be loaded from storyboard 'MerchantCenter' as 'VerificationUploadExampleViewController'.") }
        if _R.storyboard.merchantCenter().myWallet() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myWallet' could not be loaded from storyboard 'MerchantCenter' as 'MyWalletViewController'.") }
        if _R.storyboard.merchantCenter().timeSectionSelect() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'timeSectionSelect' could not be loaded from storyboard 'MerchantCenter' as 'TimeSectionSelectViewController'.") }
        if _R.storyboard.merchantCenter().shopProductManage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopProductManage' could not be loaded from storyboard 'MerchantCenter' as 'ShopProductManageViewController'.") }
        if _R.storyboard.merchantCenter().myCollect() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myCollect' could not be loaded from storyboard 'MerchantCenter' as 'MyCollectViewController'.") }
        if _R.storyboard.merchantCenter().shopAddressManage() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopAddressManage' could not be loaded from storyboard 'MerchantCenter' as 'ShopAddressManageViewController'.") }
        if _R.storyboard.merchantCenter().shopCreate() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopCreate' could not be loaded from storyboard 'MerchantCenter' as 'ShopCreateViewController'.") }
        if _R.storyboard.merchantCenter().myShop() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myShop' could not be loaded from storyboard 'MerchantCenter' as 'MyShopViewController'.") }
        if _R.storyboard.merchantCenter().wantCollect() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wantCollect' could not be loaded from storyboard 'MerchantCenter' as 'WantCollectViewController'.") }
        if _R.storyboard.merchantCenter().chargePaymentSelect() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chargePaymentSelect' could not be loaded from storyboard 'MerchantCenter' as 'ChargePaymentSelectViewController'.") }
        if _R.storyboard.merchantCenter().refundOrderList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundOrderList' could not be loaded from storyboard 'MerchantCenter' as 'RefundOrderListViewController'.") }
        if _R.storyboard.merchantCenter().chargePoints() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chargePoints' could not be loaded from storyboard 'MerchantCenter' as 'ChargePointsViewController'.") }
        if _R.storyboard.merchantCenter().addShopAssistantTableViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addShopAssistantTableViewController' could not be loaded from storyboard 'MerchantCenter' as 'AddShopAssistantTableViewController'.") }
        if _R.storyboard.merchantCenter().myShopAssistantViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myShopAssistantViewController' could not be loaded from storyboard 'MerchantCenter' as 'MyShopAssistantViewController'.") }
        if _R.storyboard.merchantCenter().orderList() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderList' could not be loaded from storyboard 'MerchantCenter' as 'OrderListViewController'.") }
        if _R.storyboard.merchantCenter().myOrders() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myOrders' could not be loaded from storyboard 'MerchantCenter' as 'MyOrdersViewController'.") }
        if _R.storyboard.merchantCenter().orderDeliveryCompany() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDeliveryCompany' could not be loaded from storyboard 'MerchantCenter' as 'OrderDeliveryCompanyViewController'.") }
        if _R.storyboard.merchantCenter().myPoints() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'myPoints' could not be loaded from storyboard 'MerchantCenter' as 'MyPointsViewController'.") }
        if _R.storyboard.merchantCenter().merchantCenterVerification() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'merchantCenterVerification' could not be loaded from storyboard 'MerchantCenter' as 'MerchantCenterVerificationViewController'.") }
        if _R.storyboard.merchantCenter().orderDeliverySucceed() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDeliverySucceed' could not be loaded from storyboard 'MerchantCenter' as 'OrderDeliverySucceedViewController'.") }
        if _R.storyboard.merchantCenter().orderLogisticsTracks() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderLogisticsTracks' could not be loaded from storyboard 'MerchantCenter' as 'OrderLogisticsTracksViewController'.") }
        if _R.storyboard.merchantCenter().saleCoupon() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'saleCoupon' could not be loaded from storyboard 'MerchantCenter' as 'SaleCouponViewController'.") }
        if _R.storyboard.merchantCenter().prefrentialPay() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'prefrentialPay' could not be loaded from storyboard 'MerchantCenter' as 'PreferentialPaySettingViewController'.") }
        if _R.storyboard.merchantCenter().chargeDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'chargeDetail' could not be loaded from storyboard 'MerchantCenter' as 'ChargeDetailViewController'.") }
        if _R.storyboard.merchantCenter().addReduce() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addReduce' could not be loaded from storyboard 'MerchantCenter' as 'AddReduceViewController'.") }
        if _R.storyboard.merchantCenter().shopCoverSelect() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopCoverSelect' could not be loaded from storyboard 'MerchantCenter' as 'ShopCoverSelectViewController'.") }
        if _R.storyboard.merchantCenter().merchantCenterInfo() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'merchantCenterInfo' could not be loaded from storyboard 'MerchantCenter' as 'MerchantCenterInfoViewController'.") }
        if _R.storyboard.merchantCenter().addDiscount() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'addDiscount' could not be loaded from storyboard 'MerchantCenter' as 'AddDiscountViewController'.") }
        if _R.storyboard.merchantCenter().merchantCenterNavScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'merchantCenterNavScene' could not be loaded from storyboard 'MerchantCenter' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.merchantCenter().refundOrderDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'refundOrderDetail' could not be loaded from storyboard 'MerchantCenter' as 'RefundOrderDetailViewController'.") }
        if _R.storyboard.merchantCenter().merchantCenterViewControllerScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'merchantCenterViewControllerScene' could not be loaded from storyboard 'MerchantCenter' as 'MerchantCenterViewController'.") }
        if _R.storyboard.merchantCenter().orderDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'orderDetail' could not be loaded from storyboard 'MerchantCenter' as 'OrderDetailViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct notification: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Notification"
      let notificationNavScene = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "NotificationNavScene")
      let notificationViewControllerScene = StoryboardViewControllerResource<NotificationViewController>(identifier: "NotificationViewControllerScene")
      
      func notificationNavScene(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationNavScene)
      }
      
      func notificationViewControllerScene(_: Void = ()) -> NotificationViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationViewControllerScene)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TabOff4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff4' is used in storyboard 'Notification', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn4") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn4' is used in storyboard 'Notification', but couldn't be loaded.") }
        if _R.storyboard.notification().notificationNavScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationNavScene' could not be loaded from storyboard 'Notification' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.notification().notificationViewControllerScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationViewControllerScene' could not be loaded from storyboard 'Notification' as 'NotificationViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct product: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Product"
      let objectReleaseSucceed = StoryboardViewControllerResource<ObjectReleaseSucceedViewController>(identifier: "ObjectReleaseSucceed")
      let productAddAttribute = StoryboardViewControllerResource<ProductAddAttributeViewController>(identifier: "ProductAddAttribute")
      let productAddNewAddress = StoryboardViewControllerResource<ProductAddNewAddressViewController>(identifier: "ProductAddNewAddress")
      let productAddNewAttribute = StoryboardViewControllerResource<ProductAddNewAttributeViewController>(identifier: "ProductAddNewAttribute")
      let productAddNewBuyNote = StoryboardViewControllerResource<ProductAddNewBuyNoteViewController>(identifier: "ProductAddNewBuyNote")
      let productCategory = StoryboardViewControllerResource<ProductCategoryViewController>(identifier: "ProductCategory")
      let productDescInput = StoryboardViewControllerResource<DetailInputViewController>(identifier: "ProductDescInput")
      let productDetail = StoryboardViewControllerResource<ProductNDetailViewController>(identifier: "ProductDetail")
      let productEdit = StoryboardViewControllerResource<ProductAddNewViewController>(identifier: "ProductEdit")
      let productFilter = StoryboardViewControllerResource<ProductFilterViewController>(identifier: "ProductFilter")
      let productHomeViewControllerScene = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "ProductHomeViewControllerScene")
      let productNavScene = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "ProductNavScene")
      let productRelatedCampaign = StoryboardViewControllerResource<ProductRelatedCampaignViewController>(identifier: "ProductRelatedCampaign")
      let productSearch = StoryboardViewControllerResource<ProductSearchViewController>(identifier: "ProductSearch")
      let productSelectAddress = StoryboardViewControllerResource<ProductSelectAddressViewController>(identifier: "ProductSelectAddress")
      let shopCategory = StoryboardViewControllerResource<ProductShopCategoryViewController>(identifier: "ShopCategory")
      
      func objectReleaseSucceed(_: Void = ()) -> ObjectReleaseSucceedViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: objectReleaseSucceed)
      }
      
      func productAddAttribute(_: Void = ()) -> ProductAddAttributeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productAddAttribute)
      }
      
      func productAddNewAddress(_: Void = ()) -> ProductAddNewAddressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productAddNewAddress)
      }
      
      func productAddNewAttribute(_: Void = ()) -> ProductAddNewAttributeViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productAddNewAttribute)
      }
      
      func productAddNewBuyNote(_: Void = ()) -> ProductAddNewBuyNoteViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productAddNewBuyNote)
      }
      
      func productCategory(_: Void = ()) -> ProductCategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productCategory)
      }
      
      func productDescInput(_: Void = ()) -> DetailInputViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDescInput)
      }
      
      func productDetail(_: Void = ()) -> ProductNDetailViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productDetail)
      }
      
      func productEdit(_: Void = ()) -> ProductAddNewViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productEdit)
      }
      
      func productFilter(_: Void = ()) -> ProductFilterViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productFilter)
      }
      
      func productHomeViewControllerScene(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productHomeViewControllerScene)
      }
      
      func productNavScene(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productNavScene)
      }
      
      func productRelatedCampaign(_: Void = ()) -> ProductRelatedCampaignViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productRelatedCampaign)
      }
      
      func productSearch(_: Void = ()) -> ProductSearchViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productSearch)
      }
      
      func productSelectAddress(_: Void = ()) -> ProductSelectAddressViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: productSelectAddress)
      }
      
      func shopCategory(_: Void = ()) -> ProductShopCategoryViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: shopCategory)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "CommonBlueBg") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CommonBlueBg' is used in storyboard 'Product', but couldn't be loaded.") }
        if UIKit.UIImage(named: "MerchantCenterVerificationSuccess") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'MerchantCenterVerificationSuccess' is used in storyboard 'Product', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOff1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOff1' is used in storyboard 'Product', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOff") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOff' is used in storyboard 'Product', but couldn't be loaded.") }
        if UIKit.UIImage(named: "CellItemCheckmarkOn") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'CellItemCheckmarkOn' is used in storyboard 'Product', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabOn1") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabOn1' is used in storyboard 'Product', but couldn't be loaded.") }
        if _R.storyboard.product().productAddNewAttribute() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productAddNewAttribute' could not be loaded from storyboard 'Product' as 'ProductAddNewAttributeViewController'.") }
        if _R.storyboard.product().productAddNewBuyNote() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productAddNewBuyNote' could not be loaded from storyboard 'Product' as 'ProductAddNewBuyNoteViewController'.") }
        if _R.storyboard.product().productFilter() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productFilter' could not be loaded from storyboard 'Product' as 'ProductFilterViewController'.") }
        if _R.storyboard.product().productDetail() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDetail' could not be loaded from storyboard 'Product' as 'ProductNDetailViewController'.") }
        if _R.storyboard.product().productCategory() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productCategory' could not be loaded from storyboard 'Product' as 'ProductCategoryViewController'.") }
        if _R.storyboard.product().productDescInput() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productDescInput' could not be loaded from storyboard 'Product' as 'DetailInputViewController'.") }
        if _R.storyboard.product().objectReleaseSucceed() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'objectReleaseSucceed' could not be loaded from storyboard 'Product' as 'ObjectReleaseSucceedViewController'.") }
        if _R.storyboard.product().productAddAttribute() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productAddAttribute' could not be loaded from storyboard 'Product' as 'ProductAddAttributeViewController'.") }
        if _R.storyboard.product().productAddNewAddress() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productAddNewAddress' could not be loaded from storyboard 'Product' as 'ProductAddNewAddressViewController'.") }
        if _R.storyboard.product().productEdit() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productEdit' could not be loaded from storyboard 'Product' as 'ProductAddNewViewController'.") }
        if _R.storyboard.product().shopCategory() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'shopCategory' could not be loaded from storyboard 'Product' as 'ProductShopCategoryViewController'.") }
        if _R.storyboard.product().productSearch() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productSearch' could not be loaded from storyboard 'Product' as 'ProductSearchViewController'.") }
        if _R.storyboard.product().productHomeViewControllerScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productHomeViewControllerScene' could not be loaded from storyboard 'Product' as 'UIKit.UIViewController'.") }
        if _R.storyboard.product().productRelatedCampaign() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productRelatedCampaign' could not be loaded from storyboard 'Product' as 'ProductRelatedCampaignViewController'.") }
        if _R.storyboard.product().productNavScene() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productNavScene' could not be loaded from storyboard 'Product' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.product().productSelectAddress() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'productSelectAddress' could not be loaded from storyboard 'Product' as 'ProductSelectAddressViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct verifyPayPass: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = VerifypasswordViewController
      
      let bundle = R.hostingBundle
      let name = "VerifyPayPass"
      let paySuccessViewController = StoryboardViewControllerResource<PaySuccessViewController>(identifier: "PaySuccessViewController")
      let verifyPayPassController = StoryboardViewControllerResource<VerifypasswordViewController>(identifier: "VerifyPayPassController")
      
      func paySuccessViewController(_: Void = ()) -> PaySuccessViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: paySuccessViewController)
      }
      
      func verifyPayPassController(_: Void = ()) -> VerifypasswordViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: verifyPayPassController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "icon_logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_logo' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_success") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_success' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if UIKit.UIImage(named: "ico_code") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ico_code' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if UIKit.UIImage(named: "btn_activity3") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'btn_activity3' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if UIKit.UIImage(named: "icon_cloud_shield") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'icon_cloud_shield' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if UIKit.UIImage(named: "pass_input_box") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'pass_input_box' is used in storyboard 'VerifyPayPass', but couldn't be loaded.") }
        if _R.storyboard.verifyPayPass().paySuccessViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'paySuccessViewController' could not be loaded from storyboard 'VerifyPayPass' as 'PaySuccessViewController'.") }
        if _R.storyboard.verifyPayPass().verifyPayPassController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'verifyPayPassController' could not be loaded from storyboard 'VerifyPayPass' as 'VerifypasswordViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}